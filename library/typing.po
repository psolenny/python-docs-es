# Copyright (C) 2001-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
# Maintained by the python-doc-es workteam.
# docs-es@python.org /
# https://mail.python.org/mailman3/lists/docs-es.python.org/
# Check https://github.com/python/python-docs-es/blob/3.8/TRANSLATORS to
# get the list of volunteers
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.8\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-10-12 19:43+0200\n"
"PO-Revision-Date: 2024-11-21 11:04-0500\n"
"Last-Translator: Alfonso Areiza Guerra <alfareiza@gmail.com>\n"
"Language-Team: python-doc-es\n"
"Language: es\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"Generated-By: Babel 2.13.0\n"
"X-Generator: Poedit 3.5\n"

#: ../Doc/library/typing.rst:3
msgid ":mod:`typing` --- Support for type hints"
msgstr ":mod:`typing` --- Soporte para *type hints*"

#: ../Doc/library/typing.rst:16
msgid "**Source code:** :source:`Lib/typing.py`"
msgstr "**Source code:** :source:`Lib/typing.py`"

#: ../Doc/library/typing.rst:20
msgid ""
"The Python runtime does not enforce function and variable type annotations. "
"They can be used by third party tools such as type checkers, IDEs, linters, "
"etc."
msgstr ""
"En tiempo de ejecución, Python no impone las anotaciones de tipado en "
"funciones y variables. Pueden ser utilizadas por herramientas de terceros "
"como validadores de tipado, IDEs, linters, etc."

#: ../Doc/library/typing.rst:26
msgid ""
"This module provides runtime support for type hints. For the original "
"specification of the typing system, see :pep:`484`. For a simplified "
"introduction to type hints, see :pep:`483`."
msgstr ""
"Este módulo proporciona soporte en tiempo de ejecución para las sugerencias "
"de tipo. Para la especificación original del sistema de tipado, véase :pep:"
"`484`. Para una introducción simplificada a las sugerencias de tipo, véase :"
"pep:`483`."

#: ../Doc/library/typing.rst:31
msgid ""
"The function below takes and returns a string and is annotated as follows::"
msgstr ""
"La siguiente función toma y retorna una cadena de texto, que se anota de la "
"siguiente manera::"

#: ../Doc/library/typing.rst:36
msgid ""
"In the function ``greeting``, the argument ``name`` is expected to be of "
"type :class:`str` and the return type :class:`str`. Subtypes are accepted as "
"arguments."
msgstr ""
"En la función ``greeting``, se espera que el argumento ``name``  sea de "
"tipo :class:`str` y que el tipo retornado sea :class:`str`. Los subtipos "
"también son aceptados como argumento válido."

#: ../Doc/library/typing.rst:40
msgid ""
"New features are frequently added to the ``typing`` module. The "
"`typing_extensions <https://pypi.org/project/typing-extensions/>`_ package "
"provides backports of these new features to older versions of Python."
msgstr ""
"Frecuentemente se agregan nuevas funcionalidades al módulo ``typing``. El "
"paquete `typing_extensions <https://pypi.org/project/typing-extensions/>`_ "
"provee backports de estas nuevas funcionalidades para versiones más antiguas "
"de Python."

#: ../Doc/library/typing.rst:44
msgid ""
"For a summary of deprecated features and a deprecation timeline, please see "
"`Deprecation Timeline of Major Features`_."
msgstr ""
"Para ver un resumen de las características descontinuadas y un histórico de "
"estas, consulte `Calendario de descontinuación de características "
"principales`_."

#: ../Doc/library/typing.rst:50
msgid ""
"`\"Typing cheat sheet\" <https://mypy.readthedocs.io/en/stable/"
"cheat_sheet_py3.html>`_"
msgstr ""
"`”Guía rápida sobre los indicadores de tipo” <https://mypy.readthedocs.io/en/"
"stable/cheat_sheet_py3.html>`_"

#: ../Doc/library/typing.rst:50
msgid "A quick overview of type hints (hosted at the mypy docs)"
msgstr ""
"Una visión general de los indicadores de tipo (hospedado por mypy docs, en "
"inglés.)"

#: ../Doc/library/typing.rst:55
msgid ""
"\"Type System Reference\" section of `the mypy docs <https://mypy."
"readthedocs.io/en/stable/index.html>`_"
msgstr ""
"Sección “Referencia sobre sistema de tipo” de `the mypy docs <https://mypy."
"readthedocs.io/en/stable/index.html>`_"

#: ../Doc/library/typing.rst:53
msgid ""
"The Python typing system is standardised via PEPs, so this reference should "
"broadly apply to most Python type checkers. (Some parts may still be "
"specific to mypy.)"
msgstr ""
"El sistema de tipos de Python es estandarizado por medio de las PEPs, así "
"que esta referencia debe aplicarse a la mayoría de validadores de tipo de "
"Python. (Algunas partes pueden referirse específicamente a mypy.)"

#: ../Doc/library/typing.rst:59
msgid ""
"`\"Static Typing with Python\" <https://typing.readthedocs.io/en/latest/>`_"
msgstr ""
"`”Tipado estático con Python” <https://typing.readthedocs.io/en/latest/>`_"

#: ../Doc/library/typing.rst:58
msgid ""
"Type-checker-agnostic documentation written by the community detailing type "
"system features, useful typing related tools and typing best practices."
msgstr ""
"Documentación independiente del validador de tipos escrita por la comunidad "
"que detalla las características del sistema de tipos, herramientas útiles "
"relacionadas con el tipado y mejores prácticas."

#: ../Doc/library/typing.rst:65
msgid "Relevant PEPs"
msgstr "PEPs relevantes"

#: ../Doc/library/typing.rst:67
msgid ""
"Since the initial introduction of type hints in :pep:`484` and :pep:`483`, a "
"number of PEPs have modified and enhanced Python's framework for type "
"annotations:"
msgstr ""
"Desde la introducción inicial de los indicadores de tipo en :pep:`484` y :"
"pep:`483`, un número de PEPs han modificado y mejorado el sistema de "
"anotaciones de tipos de Python:"

#: ../Doc/library/typing.rst:77
msgid ":pep:`526`: Syntax for Variable Annotations"
msgstr ":pep:`526`: Sintaxis para anotaciones de variables"

#: ../Doc/library/typing.rst:77
msgid ""
"*Introducing* syntax for annotating variables outside of function "
"definitions, and :data:`ClassVar`"
msgstr ""
"*Introduce* sintaxis para anotar variables fuera de definiciones de "
"funciones, y :data:`ClassVar`"

#: ../Doc/library/typing.rst:80
msgid ":pep:`544`: Protocols: Structural subtyping (static duck typing)"
msgstr ""
":pep:`544`: Protocolos: herencia estructural (\"duck typing\" estático)"

#: ../Doc/library/typing.rst:80
msgid ""
"*Introducing* :class:`Protocol` and the :func:"
"`@runtime_checkable<runtime_checkable>` decorator"
msgstr ""
"*Introduce* :class:`Protocol` y el decorador :func:"
"`@runtime_checkable<runtime_checkable>`"

#: ../Doc/library/typing.rst:83
msgid ":pep:`585`: Type Hinting Generics In Standard Collections"
msgstr ":pep:`585`: Indicadores de tipo genéricos en las colecciones estándar"

#: ../Doc/library/typing.rst:83
msgid ""
"*Introducing* :class:`types.GenericAlias` and the ability to use standard "
"library classes as :ref:`generic types<types-genericalias>`"
msgstr ""
"*Introduce* :class:`types.GenericAlias` y la habilidad de utilizar clases de "
"la librería estándar como :ref:`tipos genéricos<types-genericalias>`"

#: ../Doc/library/typing.rst:85
msgid ":pep:`586`: Literal Types"
msgstr ":pep:`586`: Tipos literales"

#: ../Doc/library/typing.rst:86
msgid "*Introducing* :data:`Literal`"
msgstr "*Introduce* :data:`Literal`"

#: ../Doc/library/typing.rst:87
msgid ""
":pep:`589`: TypedDict: Type Hints for Dictionaries with a Fixed Set of Keys"
msgstr ""
":pep:`589`: TypedDict: Indicadores de tipo para diccionarios con un conjunto "
"de llaves fijo"

#: ../Doc/library/typing.rst:88
msgid "*Introducing* :class:`TypedDict`"
msgstr "*Introduce* :class:`TypedDict`"

#: ../Doc/library/typing.rst:89
msgid ":pep:`591`: Adding a final qualifier to typing"
msgstr ":pep:`591`: Agregar un cualificador final a typing"

#: ../Doc/library/typing.rst:90
msgid "*Introducing* :data:`Final` and the :func:`@final<final>` decorator"
msgstr "*Introduce* :data:`Final` y el decorador :func:`@final<final>`"

#: ../Doc/library/typing.rst:91
msgid ":pep:`593`: Flexible function and variable annotations"
msgstr ":pep:`593`: Anotaciones flexibles para funciones y variables"

#: ../Doc/library/typing.rst:92
msgid "*Introducing* :data:`Annotated`"
msgstr "*Introduce* :data:`Annotated`"

#: ../Doc/library/typing.rst:95
msgid ":pep:`604`: Allow writing union types as ``X | Y``"
msgstr ":pep:`604`: Permitir la escritura de tipos unión como ``X | Y``"

#: ../Doc/library/typing.rst:94
msgid ""
"*Introducing* :data:`types.UnionType` and the ability to use the binary-or "
"operator ``|`` to signify a :ref:`union of types<types-union>`"
msgstr ""
"*Introduce* :data:`types.UnionType` y la habilidad de usar el operador "
"binario de disyunción ``|`` para significar una :ref:`unión de tipos<types-"
"union>`"

#: ../Doc/library/typing.rst:97
msgid ":pep:`612`: Parameter Specification Variables"
msgstr ":pep:`612`: Variables de especificación de parámetros"

#: ../Doc/library/typing.rst:98
msgid "*Introducing* :class:`ParamSpec` and :data:`Concatenate`"
msgstr "*Introduce* :class:`ParamSpec` y :data:`Concatenate`"

#: ../Doc/library/typing.rst:99
msgid ":pep:`613`: Explicit Type Aliases"
msgstr ":pep:`613`: Alias de tipo explícitos"

#: ../Doc/library/typing.rst:100
msgid "*Introducing* :data:`TypeAlias`"
msgstr "*Introduce* :data:`TypeAlias`"

#: ../Doc/library/typing.rst:101
msgid ":pep:`646`: Variadic Generics"
msgstr ":pep:`646`: Genéricos variádicos"

#: ../Doc/library/typing.rst:102
msgid "*Introducing* :data:`TypeVarTuple`"
msgstr "*Introduce* :data:`TypeVarTuple`"

#: ../Doc/library/typing.rst:103
msgid ":pep:`647`: User-Defined Type Guards"
msgstr ":pep:`647`: Protecciones de tipo definidas por le usuarie"

#: ../Doc/library/typing.rst:104
msgid "*Introducing* :data:`TypeGuard`"
msgstr "*Introduce* :data:`TypeGuard`"

#: ../Doc/library/typing.rst:105
msgid ""
":pep:`655`: Marking individual TypedDict items as required or potentially "
"missing"
msgstr ""
":pep:`655`: Marcar elementos individuales de un TypedDict como requeridos o "
"potencialmente ausentes"

#: ../Doc/library/typing.rst:106
msgid "*Introducing* :data:`Required` and :data:`NotRequired`"
msgstr "*Introduce* :data:`Required` y :data:`NotRequired`"

#: ../Doc/library/typing.rst:107
msgid ":pep:`673`: Self type"
msgstr ":pep:`673`: Tipo Self"

#: ../Doc/library/typing.rst:108
msgid "*Introducing* :data:`Self`"
msgstr "*Introduce* :data:`Self`"

#: ../Doc/library/typing.rst:109
msgid ":pep:`675`: Arbitrary Literal String Type"
msgstr ":pep:`675`: Tipo para cadenas de caracteres literales arbitrarias"

#: ../Doc/library/typing.rst:110
msgid "*Introducing* :data:`LiteralString`"
msgstr "*Introduce* :data:`LiteralString`"

#: ../Doc/library/typing.rst:111
msgid ":pep:`681`: Data Class Transforms"
msgstr ":pep:`681`: Transformadores de Clases de Datos"

#: ../Doc/library/typing.rst:112
msgid ""
"*Introducing* the :func:`@dataclass_transform<dataclass_transform>` decorator"
msgstr ""
"*Introduce* el decorador :func:`@dataclass_transform<dataclass_transform>`"

#: ../Doc/library/typing.rst:114
msgid ":pep:`692`: Using ``TypedDict`` for more precise ``**kwargs`` typing"
msgstr ""
":pep:`692`: Usar ``TypedDict`` para un tipado más preciso con ``**kwargs``"

#: ../Doc/library/typing.rst:114
msgid ""
"*Introducing* a new way of typing ``**kwargs`` with :data:`Unpack` and :data:"
"`TypedDict`"
msgstr ""
"*Introduce* a una nueva forma de tipado ``**kwargs`` con :data:`Unpack` y :"
"data:`TypedDict`"

#: ../Doc/library/typing.rst:116
msgid ":pep:`695`: Type Parameter Syntax"
msgstr ":pep:`695`: Sintaxis para parámetros de tipo"

#: ../Doc/library/typing.rst:117
msgid ""
"*Introducing* builtin syntax for creating generic functions, classes, and "
"type aliases."
msgstr ""
"*Introduce* sintaxis integrada para crear funciones genéricas, clases y "
"alias de tipos."

#: ../Doc/library/typing.rst:119
msgid ":pep:`698`: Adding an override decorator to typing"
msgstr ":pep:`698`: Agregar un decorador *override* al sistema de tipado"

#: ../Doc/library/typing.rst:119
msgid "*Introducing* the :func:`@override<override>` decorator"
msgstr "*Introduce* el decorador :func:`@override<override>`"

#: ../Doc/library/typing.rst:129
msgid "Type aliases"
msgstr "Alias de tipo"

#: ../Doc/library/typing.rst:131
msgid ""
"A type alias is defined using the :keyword:`type` statement, which creates "
"an instance of :class:`TypeAliasType`. In this example, ``Vector`` and "
"``list[float]`` will be treated equivalently by static type checkers::"
msgstr ""
"Un alias de tipo se define usando la declaración :keyword:`type`, el cual "
"crea una instancia de :class:`TypeAliasType`. En este ejemplo, ``Vector`` y "
"``list[float]`` serán tratados de manera equivalente a los validadores de "
"tipo estático::"

#: ../Doc/library/typing.rst:144
msgid ""
"Type aliases are useful for simplifying complex type signatures. For "
"example::"
msgstr ""
"Los alias de tipo son útiles para simplificar firmas de tipo complejas. Por "
"ejemplo::"

#: ../Doc/library/typing.rst:162
msgid ""
"The :keyword:`type` statement is new in Python 3.12. For backwards "
"compatibility, type aliases can also be created through simple assignment::"
msgstr ""
"La declaración :keyword:`type` es nueva en Python 3.12. Para compatibilidad "
"con versiones anteriores, los alias de tipo también se pueden crear mediante "
"una asignación simple.::"

#: ../Doc/library/typing.rst:167
msgid ""
"Or marked with :data:`TypeAlias` to make it explicit that this is a type "
"alias, not a normal variable assignment::"
msgstr ""
"O marcarse con :data:`TypeAlias` para dejar explícito que se trata de un "
"alias de tipo, no de una asignación de variable normal::"

#: ../Doc/library/typing.rst:177
msgid "NewType"
msgstr "NewType"

#: ../Doc/library/typing.rst:179
msgid "Use the :class:`NewType` helper to create distinct types::"
msgstr "Use la clase auxiliar :class:`NewType` para crear tipos distintos::"

#: ../Doc/library/typing.rst:186
msgid ""
"The static type checker will treat the new type as if it were a subclass of "
"the original type. This is useful in helping catch logical errors::"
msgstr ""
"El validador estático de tipos tratará el nuevo tipo como si fuera una "
"subclase del tipo original. Esto es útil para capturar errores lógicos::"

#: ../Doc/library/typing.rst:198
msgid ""
"You may still perform all ``int`` operations on a variable of type "
"``UserId``, but the result will always be of type ``int``. This lets you "
"pass in a ``UserId`` wherever an ``int`` might be expected, but will prevent "
"you from accidentally creating a ``UserId`` in an invalid way::"
msgstr ""
"Se pueden realizar todas las operaciones de ``int`` en una variable de tipo "
"``UserId``, pero el resultado siempre será de tipo ``int``. Esto permite "
"pasar un ``UserId`` allí donde se espere un ``int``, pero evitará la "
"creación accidental de un ``UserId`` de manera incorrecta::"

#: ../Doc/library/typing.rst:206
msgid ""
"Note that these checks are enforced only by the static type checker. At "
"runtime, the statement ``Derived = NewType('Derived', Base)`` will make "
"``Derived`` a callable that immediately returns whatever parameter you pass "
"it. That means the expression ``Derived(some_value)`` does not create a new "
"class or introduce much overhead beyond that of a regular function call."
msgstr ""
"Tenga en cuenta que estas validaciones solo las aplica el validador de tipo "
"estático. En tiempo de ejecución, la declaración ``Derived = "
"NewType('Derived', Base)`` hará que ``Derived`` sea una clase que retorna "
"inmediatamente cualquier parámetro que le pase. Eso significa que la "
"expresión ``Derived(some_value)`` no crea una nueva clase ni introduce mucha "
"sobrecarga más allá de la de una llamada de función regular."

#: ../Doc/library/typing.rst:212
msgid ""
"More precisely, the expression ``some_value is Derived(some_value)`` is "
"always true at runtime."
msgstr ""
"Más concretamente, la expresión ``some_value is Derived(some_value)`` será "
"siempre verdadera en tiempo de ejecución."

#: ../Doc/library/typing.rst:215
msgid "It is invalid to create a subtype of ``Derived``::"
msgstr "No es válido crear un subtipo de ``Derived``:"

#: ../Doc/library/typing.rst:224
msgid ""
"However, it is possible to create a :class:`NewType` based on a 'derived' "
"``NewType``::"
msgstr ""
"Sin embargo, es posible crear un :class:`NewType` basado en un ``NewType`` "
"'derivado':"

#: ../Doc/library/typing.rst:232
msgid "and typechecking for ``ProUserId`` will work as expected."
msgstr ""
"y la comprobación de tipo para ``ProUserId`` funcionará como se espera."

#: ../Doc/library/typing.rst:234
msgid "See :pep:`484` for more details."
msgstr "Véase :pep:`484` para más detalle."

#: ../Doc/library/typing.rst:238
msgid ""
"Recall that the use of a type alias declares two types to be *equivalent* to "
"one another. Doing ``type Alias = Original`` will make the static type "
"checker treat ``Alias`` as being *exactly equivalent* to ``Original`` in all "
"cases. This is useful when you want to simplify complex type signatures."
msgstr ""
"Recuerde que el uso de alias de tipo implica que los dos tipos son "
"*equivalentes* entre sí. Haciendo ``type Alias = Original`` provocará que el "
"validador estático de tipos trate ``Alias`` como algo *exactamente "
"equivalente* a ``Original`` en todos los casos. Esto es útil para cuando se "
"quiera simplificar indicadores de tipo complejos."

#: ../Doc/library/typing.rst:243
msgid ""
"In contrast, ``NewType`` declares one type to be a *subtype* of another. "
"Doing ``Derived = NewType('Derived', Original)`` will make the static type "
"checker treat ``Derived`` as a *subclass* of ``Original``, which means a "
"value of type ``Original`` cannot be used in places where a value of type "
"``Derived`` is expected. This is useful when you want to prevent logic "
"errors with minimal runtime cost."
msgstr ""
"En cambio, ``NewType`` declara un tipo que es *subtipo* de otro. Haciendo "
"``Derived = NewType('Derived', Original)`` hará que el Validador estático de "
"tipos trate ``Derived`` como una *subclase* de ``Original``, lo que implica "
"que un valor de tipo ``Original`` no puede ser usado allí donde se espere un "
"valor de tipo ``Derived``. Esto es útil para prevenir errores lógicos con un "
"coste de ejecución mínimo."

#: ../Doc/library/typing.rst:252
msgid ""
"``NewType`` is now a class rather than a function.  As a result, there is "
"some additional runtime cost when calling ``NewType`` over a regular "
"function."
msgstr ""
"``NewType`` es ahora una clase en lugar de una función. Existe un costo de "
"tiempo de ejecución adicional cuando se llama a ``NewType`` a través de una "
"función normal."

#: ../Doc/library/typing.rst:257
msgid ""
"The performance of calling ``NewType`` has been restored to its level in "
"Python 3.9."
msgstr ""
"El rendimiento al llamar ``NewType`` ha sido restaurado a su nivel en Python "
"3.9."

#: ../Doc/library/typing.rst:264
msgid "Annotating callable objects"
msgstr "Anotaciones en objetos invocables"

#: ../Doc/library/typing.rst:266
msgid ""
"Functions -- or other :term:`callable` objects -- can be annotated using :"
"class:`collections.abc.Callable` or :data:`typing.Callable`. "
"``Callable[[int], str]`` signifies a function that takes a single parameter "
"of type :class:`int` and returns a :class:`str`."
msgstr ""
"Las funciones -- u otro objeto invocable :term:`callable` se pueden anotar "
"utilizando :class:`collections.abc.Callable` o :data:`typing.Callable`. "
"``Callable[[int], str]`` se refiere a una función que toma un solo parámetro "
"de tipo :class:`int` y retorna un :class:`str`."

#: ../Doc/library/typing.rst:271 ../Doc/library/typing.rst:2873
#: ../Doc/library/typing.rst:3015
msgid "For example:"
msgstr "Por ejemplo:"

#: ../Doc/library/typing.rst:289
msgid ""
"The subscription syntax must always be used with exactly two values: the "
"argument list and the return type.  The argument list must be a list of "
"types, a :class:`ParamSpec`, :data:`Concatenate`, or an ellipsis. The return "
"type must be a single type."
msgstr ""
"La sintaxis de suscripción siempre debe utilizarse con exactamente dos "
"valores: una lista de argumentos y el tipo de retorno. La lista de "
"argumentos debe ser una lista de tipos, un :class:`ParamSpec`, :data:"
"`Concatenate` o una elipsis. El tipo de retorno debe ser un único tipo."

#: ../Doc/library/typing.rst:294
msgid ""
"If a literal ellipsis ``...`` is given as the argument list, it indicates "
"that a callable with any arbitrary parameter list would be acceptable:"
msgstr ""
"Si se proporciona una elipsis como lista de argumentos, indica que sería "
"aceptable un invocable con cualquier lista de parámetros arbitraria:"

#: ../Doc/library/typing.rst:306
msgid ""
"``Callable`` cannot express complex signatures such as functions that take a "
"variadic number of arguments, :func:`overloaded functions <overload>`, or "
"functions that have keyword-only parameters. However, these signatures can "
"be expressed by defining a :class:`Protocol` class with a :meth:`~object."
"__call__` method:"
msgstr ""
"``Callable`` no puede representar firmas complejas como funciones que toman "
"un número variado de argumentos, :func:`funciones sobrecargadas <overload>` "
"o funciones que reciben parámetros de solo palabras clave. Sin embargo, "
"estas firmas se pueden definir al definir una clase :class:`Protocol` con un "
"método :meth:`~object.__call__` method:"

#: ../Doc/library/typing.rst:333
msgid ""
"Callables which take other callables as arguments may indicate that their "
"parameter types are dependent on each other using :class:`ParamSpec`. "
"Additionally, if that callable adds or removes arguments from other "
"callables, the :data:`Concatenate` operator may be used.  They take the form "
"``Callable[ParamSpecVariable, ReturnType]`` and "
"``Callable[Concatenate[Arg1Type, Arg2Type, ..., ParamSpecVariable], "
"ReturnType]`` respectively."
msgstr ""
"Los invocables que toman otros invocables como argumentos pueden indicar que "
"sus tipos de parámetros dependen unos de otros utilizando :class:"
"`ParamSpec`. Además, si ese invocable agrega o elimina argumentos de otros "
"invocables, se puede utilizar el operador :data:`Concatenate`. Toman la "
"forma ``Callable[ParamSpecVariable, ReturnType]`` y "
"``Callable[Concatenate[Arg1Type, Arg2Type, ..., ParamSpecVariable], "
"ReturnType]`` respectivamente."

#: ../Doc/library/typing.rst:341 ../Doc/library/typing.rst:3544
msgid ""
"``Callable`` now supports :class:`ParamSpec` and :data:`Concatenate`. See :"
"pep:`612` for more details."
msgstr ""
"``Callable`` ahora es compatible con :class:`ParamSpec` y :data:"
"`Concatenate`. Consulte :pep:`612` para obtener más información."

#: ../Doc/library/typing.rst:346
msgid ""
"The documentation for :class:`ParamSpec` and :class:`Concatenate` provides "
"examples of usage in ``Callable``."
msgstr ""
"La documentación de :class:`ParamSpec` y :class:`Concatenate` proporciona "
"ejemplos de uso en ``Callable``."

#: ../Doc/library/typing.rst:352
msgid "Generics"
msgstr "Genéricos"

#: ../Doc/library/typing.rst:354
msgid ""
"Since type information about objects kept in containers cannot be statically "
"inferred in a generic way, many container classes in the standard library "
"support subscription to denote the expected types of container elements."
msgstr ""
"Dado que la información de tipo sobre los objetos guardados en contenedores "
"no se puede inferir estáticamente de manera genérica, muchas clases de "
"contenedor en la biblioteca estándar admiten suscripción para indicar los "
"tipos esperados de elementos de contenedor."

#: ../Doc/library/typing.rst:371
msgid ""
"Generic functions and classes can be parameterized by using :ref:`type "
"parameter syntax <type-params>`::"
msgstr ""
"Funciones y clases genéricas pueden ser parametrizadas usando :ref:`type "
"parameter syntax <type-params>`::"

#: ../Doc/library/typing.rst:379
msgid "Or by using the :class:`TypeVar` factory directly::"
msgstr "O utilizando directamente la fábrica :class:`TypeVar`::"

#: ../Doc/library/typing.rst:389
msgid "Syntactic support for generics is new in Python 3.12."
msgstr "El soporte sintáctico para genéricos es nuevo en Python 3.12."

#: ../Doc/library/typing.rst:395
msgid "Annotating tuples"
msgstr "Anotaciones en tuplas"

#: ../Doc/library/typing.rst:397
msgid ""
"For most containers in Python, the typing system assumes that all elements "
"in the container will be of the same type. For example::"
msgstr ""
"En la mayoría de los contenedores de Python, el sistema de tipado supone que "
"todos los elementos del contenedor serán del mismo tipo. Por ejemplo:"

#: ../Doc/library/typing.rst:412
msgid ""
":class:`list` only accepts one type argument, so a type checker would emit "
"an error on the ``y`` assignment above. Similarly, :class:`~collections.abc."
"Mapping` only accepts two type arguments: the first indicates the type of "
"the keys, and the second indicates the type of the values."
msgstr ""
":class:`list` solo acepta un argumento de tipo, por lo que un validador de "
"tipos emitiría un error en la asignación ``y`` anterior. De manera similar, :"
"class:`~collections.abc.Mapping` solo acepta dos argumentos de tipo: el "
"primero indica el tipo de las claves y el segundo indica el tipo de los "
"valores."

#: ../Doc/library/typing.rst:418
msgid ""
"Unlike most other Python containers, however, it is common in idiomatic "
"Python code for tuples to have elements which are not all of the same type. "
"For this reason, tuples are special-cased in Python's typing system. :class:"
"`tuple` accepts *any number* of type arguments::"
msgstr ""
"Sin embargo, a diferencia de la mayoría de los demás contenedores de Python, "
"es común en el código idiomático de Python que las tuplas tengan elementos "
"que no sean todos del mismo tipo. Por este motivo, las tuplas son un caso "
"especial en el sistema de tipado de Python. :class:`tuple` acepta *cualquier "
"número* de argumentos de tipo::"

#: ../Doc/library/typing.rst:434
msgid ""
"To denote a tuple which could be of *any* length, and in which all elements "
"are of the same type ``T``, use ``tuple[T, ...]``. To denote an empty tuple, "
"use ``tuple[()]``. Using plain ``tuple`` as an annotation is equivalent to "
"using ``tuple[Any, ...]``::"
msgstr ""
"Para indicar una tupla que podría tener *cualquier* tamaño y en la que todos "
"los elementos son del mismo tipo ``T``, utilice ``tuple[T, ...]``. Para "
"indicar una tupla vacía, utilice ``tuple[()]``. El uso de ``tuple`` simple "
"como anotación es equivalente a utilizar ``tuple[Any, ...]``::"

#: ../Doc/library/typing.rst:457
msgid "The type of class objects"
msgstr "El tipo de objetos de clase"

#: ../Doc/library/typing.rst:459
msgid ""
"A variable annotated with ``C`` may accept a value of type ``C``. In "
"contrast, a variable annotated with ``type[C]`` (or :class:`typing.Type[C] "
"<Type>`) may accept values that are classes themselves -- specifically, it "
"will accept the *class object* of ``C``. For example::"
msgstr ""
"Una variable anotada con ``C`` puede aceptar un valor de tipo ``C``. Por el "
"contrario, una variable anotada con ``type[C]`` (o :class:`typing.Type[C] "
"<Type>`) puede aceptar valores que sean clases en sí mismas; "
"específicamente, aceptará el *objeto de clase* de ``C``. Por ejemplo:"

#: ../Doc/library/typing.rst:469
msgid "Note that ``type[C]`` is covariant::"
msgstr "Tenga en cuenta que ``type[C]`` es covariante::"

#: ../Doc/library/typing.rst:485
msgid ""
"The only legal parameters for :class:`type` are classes, :data:`Any`, :ref:"
"`type variables <generics>`, and unions of any of these types. For example::"
msgstr ""
"Los únicos parámetros legales para :class:`type` son las clases, :data:"
"`Any`, :ref:`variables de tipo <generics>` y uniones de cualquiera de estos "
"tipos. Por ejemplo::"

#: ../Doc/library/typing.rst:497
msgid ""
"``type[Any]`` is equivalent to :class:`type`, which is the root of Python's :"
"ref:`metaclass hierarchy <metaclasses>`."
msgstr ""
"``type[Any]`` es equivalente a :class:`type`, que es la raíz de la :ref:"
"`jerarquía de metaclases <metaclasses>` de Python."

#: ../Doc/library/typing.rst:503
msgid "User-defined generic types"
msgstr "Tipos genéricos definidos por el usuario"

#: ../Doc/library/typing.rst:505
msgid "A user-defined class can be defined as a generic class."
msgstr ""
"Una clase definida por el usuario puede ser definida como una clase genérica."

#: ../Doc/library/typing.rst:528
msgid ""
"This syntax indicates that the class ``LoggedVar`` is parameterised around a "
"single :class:`type variable <TypeVar>` ``T`` . This also makes ``T`` valid "
"as a type within the class body."
msgstr ""
"Esta sintaxis indica que la clase ``LoggedVar`` está parametrizada en torno "
"a una única variable de tipo :class:`<TypeVar>` ``T`` . Esto también hace "
"que ``T`` sea válida como tipo dentro del cuerpo de la clase."

#: ../Doc/library/typing.rst:532
msgid ""
"Generic classes implicitly inherit from :class:`Generic`. For compatibility "
"with Python 3.11 and lower, it is also possible to inherit explicitly from :"
"class:`Generic` to indicate a generic class::"
msgstr ""
"Las clases genéricas heredan implícitamente de :class:`Generic`. Para "
"compatibilidad con Python 3.11 y versiones anteriores, también es posible "
"heredar explícitamente de :class:`Generic` para indicar una clase genérica::"

#: ../Doc/library/typing.rst:543
msgid ""
"Generic classes have :meth:`~object.__class_getitem__` methods, meaning they "
"can be parameterised at runtime (e.g. ``LoggedVar[int]`` below)::"
msgstr ""
"Las clases genéricas tienen métodos :meth:`~object.__class_getitem__`, lo "
"que significa que se pueden parametrizar en tiempo de ejecución (por "
"ejemplo, ``LoggedVar[int]`` a continuación)::"

#: ../Doc/library/typing.rst:552
msgid ""
"A generic type can have any number of type variables. All varieties of :"
"class:`TypeVar` are permissible as parameters for a generic type::"
msgstr ""
"Un tipo genérico puede tener un numero cualquiera de variables de tipo. Se "
"permiten todas las variaciones de :class:`TypeVar` para ser usadas como "
"parámetros de un tipo genérico::"

#: ../Doc/library/typing.rst:567
msgid ""
"Each type variable argument to :class:`Generic` must be distinct. This is "
"thus invalid::"
msgstr ""
"Cada argumento de variable de tipo de :class:`Generic` debe ser distinto. "
"Por lo tanto, esto no es válido::"

#: ../Doc/library/typing.rst:581
msgid "Generic classes can also inherit from other classes::"
msgstr "Las clases genéricas también pueden heredar de otras clases:"

#: ../Doc/library/typing.rst:588
msgid ""
"When inheriting from generic classes, some type parameters could be fixed::"
msgstr ""
"Al heredar de clases genéricas, algunos parámetros de tipo podrían ser fijos:"

#: ../Doc/library/typing.rst:595
msgid "In this case ``MyDict`` has a single parameter, ``T``."
msgstr "En este caso ``MyDict`` tiene un solo parámetro, ``T``."

#: ../Doc/library/typing.rst:597
msgid ""
"Using a generic class without specifying type parameters assumes :data:`Any` "
"for each position. In the following example, ``MyIterable`` is not generic "
"but implicitly inherits from ``Iterable[Any]``:"
msgstr ""
"El uso de una clase genérica sin especificar parámetros de tipo supone :data:"
"`Any` para cada posición. En el siguiente ejemplo, ``MyIterable`` no es "
"genérico, sino que hereda implícitamente de ``Iterable[Any]``:"

#: ../Doc/library/typing.rst:608
msgid "User-defined generic type aliases are also supported. Examples::"
msgstr ""
"También se admiten alias de tipos genéricos definidos por el usuario. "
"Ejemplos:"

#: ../Doc/library/typing.rst:623
msgid ""
"For backward compatibility, generic type aliases can also be created through "
"a simple assignment::"
msgstr ""
"Para compatibilidad con versiones anteriores, también se pueden crear alias "
"de tipos genéricos mediante una asignación simple:"

#: ../Doc/library/typing.rst:632
msgid ":class:`Generic` no longer has a custom metaclass."
msgstr ":class:`Generic` ya no posee una metaclase personalizable."

#: ../Doc/library/typing.rst:635
msgid ""
"Syntactic support for generics and type aliases is new in version 3.12. "
"Previously, generic classes had to explicitly inherit from :class:`Generic` "
"or contain a type variable in one of their bases."
msgstr ""
"La compatibilidad sintáctica con genéricos y alias de tipo es una novedad en "
"la versión 3.12. Antes, las clases genéricas debían heredar explícitamente "
"de :class:`Generic` o contener una variable de tipo en una de sus bases."

#: ../Doc/library/typing.rst:640
msgid ""
"User-defined generics for parameter expressions are also supported via "
"parameter specification variables in the form ``[**P]``.  The behavior is "
"consistent with type variables' described above as parameter specification "
"variables are treated by the typing module as a specialized type variable.  "
"The one exception to this is that a list of types can be used to substitute "
"a :class:`ParamSpec`::"
msgstr ""
"Los genéricos definidos por el usuario para expresiones de parámetros "
"también se admiten a través de  variables de especificación de parámetros en "
"el formato ``[**P]``. El comportamiento es coherente con las variables de "
"tipo descritas anteriormente, ya que el módulo de tipado trata las variables "
"de especificación de parámetros como una variable de tipo especializada. La "
"única excepción a esto es que se puede utilizar una lista de tipos para "
"sustituir un :class:`ParamSpec`::"

#: ../Doc/library/typing.rst:651
msgid ""
"Classes generic over a :class:`ParamSpec` can also be created using explicit "
"inheritance from :class:`Generic`. In this case, ``**`` is not used::"
msgstr ""
"También se pueden crear clases genéricas sobre :class:`ParamSpec` utilizando "
"herencia explícita de :class:`Generic`. En este caso, no se utiliza ``**``::"

#: ../Doc/library/typing.rst:661
msgid ""
"Another difference between :class:`TypeVar` and :class:`ParamSpec` is that a "
"generic with only one parameter specification variable will accept parameter "
"lists in the forms ``X[[Type1, Type2, ...]]`` and also ``X[Type1, "
"Type2, ...]`` for aesthetic reasons.  Internally, the latter is converted to "
"the former, so the following are equivalent::"
msgstr ""
"Otra diferencia entre :class:`TypeVar` y :class:`ParamSpec` es que una "
"variable genérica con una sola especificación de parámetros aceptará listas "
"de parámetros en los formatos ``X[[Type1, Type2, ...]]`` y también "
"``X[Type1, Type2, ...]`` por razones estéticas. Internamente, el último se "
"convierte al primero, por lo que los siguientes son equivalentes::"

#: ../Doc/library/typing.rst:674
msgid ""
"Note that generics with :class:`ParamSpec` may not have correct "
"``__parameters__`` after substitution in some cases because they are "
"intended primarily for static type checking."
msgstr ""
"Tenga en cuenta que los genéricos con :class:`ParamSpec` pueden no tener "
"``__parameters__`` correctos después de la sustitución en algunos casos "
"porque están destinados principalmente a la verificación de tipos estáticos."

#: ../Doc/library/typing.rst:678
msgid ""
":class:`Generic` can now be parameterized over parameter expressions. See :"
"class:`ParamSpec` and :pep:`612` for more details."
msgstr ""
":class:`Generic` ahora se puede parametrizar sobre expresiones de "
"parámetros. Consulte :class:`ParamSpec` y :pep:`612` para obtener más "
"detalles."

#: ../Doc/library/typing.rst:682
msgid ""
"A user-defined generic class can have ABCs as base classes without a "
"metaclass conflict. Generic metaclasses are not supported. The outcome of "
"parameterizing generics is cached, and most types in the typing module are :"
"term:`hashable` and comparable for equality."
msgstr ""
"Una clase genérica definida por el usuario puede tener clases ABC sin que se "
"produzca un conflicto de metaclases. No se admiten metaclases genéricas. El "
"resultado de parametrizar los genéricos se almacena en caché y la mayoría de "
"los tipos en el módulo de tipificación son :term:`hashable` y comparables en "
"términos de igualdad."

#: ../Doc/library/typing.rst:689
msgid "The :data:`Any` type"
msgstr "El tipo :data:`Any`"

#: ../Doc/library/typing.rst:691
msgid ""
"A special kind of type is :data:`Any`. A static type checker will treat "
"every type as being compatible with :data:`Any` and :data:`Any` as being "
"compatible with every type."
msgstr ""
"Un caso especial de tipo es :data:`Any`. Un Validador estático de tipos "
"tratará cualquier tipo como compatible con :data:`Any`, y :data:`Any` como "
"compatible con todos los tipos."

#: ../Doc/library/typing.rst:695
msgid ""
"This means that it is possible to perform any operation or method call on a "
"value of type :data:`Any` and assign it to any variable::"
msgstr ""
"Esto significa que es posible realizar cualquier operación o llamada a un "
"método en un valor de tipo :data:`Any` y asignarlo a cualquier variable::"

#: ../Doc/library/typing.rst:713
msgid ""
"Notice that no type checking is performed when assigning a value of type :"
"data:`Any` to a more precise type. For example, the static type checker did "
"not report an error when assigning ``a`` to ``s`` even though ``s`` was "
"declared to be of type :class:`str` and receives an :class:`int` value at "
"runtime!"
msgstr ""
"Nótese que no se realiza comprobación de tipo cuando se asigna un valor de "
"tipo :data:`Any` a un tipo más preciso. Por ejemplo, el Validador estático "
"de tipos no reportó ningún error cuando se asignó ``a`` a ``s``, aún cuando "
"se declaró ``s`` como de tipo :class:`str` y recibió un valor :class:`int` "
"en tiempo de ejecución!"

#: ../Doc/library/typing.rst:719
msgid ""
"Furthermore, all functions without a return type or parameter types will "
"implicitly default to using :data:`Any`::"
msgstr ""
"Además, todas las funciones sin un tipo de retorno o tipos en los parámetros "
"serán asignadas implícitamente a :data:`Any` por defecto::"

#: ../Doc/library/typing.rst:732
msgid ""
"This behavior allows :data:`Any` to be used as an *escape hatch* when you "
"need to mix dynamically and statically typed code."
msgstr ""
"Este comportamiento permite que :data:`Any` sea usado como una *vía de "
"escape* cuando es necesario mezclar código tipado estática y dinámicamente."

#: ../Doc/library/typing.rst:735
msgid ""
"Contrast the behavior of :data:`Any` with the behavior of :class:`object`. "
"Similar to :data:`Any`, every type is a subtype of :class:`object`. However, "
"unlike :data:`Any`, the reverse is not true: :class:`object` is *not* a "
"subtype of every other type."
msgstr ""
"Compárese el comportamiento de :data:`Any` con el de :class:`object`. De "
"manera similar a :data:`Any`, todo tipo es un subtipo de :class:`object`. "
"Sin embargo, en oposición a :data:`Any`, lo contrario no es cierto: :class:"
"`object` *no* es un subtipo de ningún otro tipo."

#: ../Doc/library/typing.rst:740
msgid ""
"That means when the type of a value is :class:`object`, a type checker will "
"reject almost all operations on it, and assigning it to a variable (or using "
"it as a return value) of a more specialized type is a type error. For "
"example::"
msgstr ""
"Esto implica que cuando el tipo de un valor es :class:`object`, un validador "
"de tipos rechazará prácticamente todas las operaciones con él, y al "
"asignarlo a una variable (o usarlo como valor de retorno) de un tipo más "
"preciso será un error de tipo. Por ejemplo::"

#: ../Doc/library/typing.rst:762
msgid ""
"Use :class:`object` to indicate that a value could be any type in a typesafe "
"manner. Use :data:`Any` to indicate that a value is dynamically typed."
msgstr ""
"Úsese :class:`object` para indicar que un valor puede ser de cualquier tipo "
"de manera segura. Úsese :data:`Any` para indicar que un valor es de tipado "
"dinámico."

#: ../Doc/library/typing.rst:767
msgid "Nominal vs structural subtyping"
msgstr "Subtipado nominal vs estructural"

#: ../Doc/library/typing.rst:769
msgid ""
"Initially :pep:`484` defined the Python static type system as using *nominal "
"subtyping*. This means that a class ``A`` is allowed where a class ``B`` is "
"expected if and only if ``A`` is a subclass of ``B``."
msgstr ""
"Inicialmente, el :pep:`484` definió el uso de *subtipado nominal* para el "
"sistema de tipado estático de Python. Esto implica que una clase ``A`` será "
"permitida allí donde se espere una clase ``B`` si y solo si ``A`` es una "
"subclase de ``B``."

# Frase ultracompleja, necesitar una revisión fuerte
#: ../Doc/library/typing.rst:773
msgid ""
"This requirement previously also applied to abstract base classes, such as :"
"class:`~collections.abc.Iterable`. The problem with this approach is that a "
"class had to be explicitly marked to support them, which is unpythonic and "
"unlike what one would normally do in idiomatic dynamically typed Python "
"code. For example, this conforms to :pep:`484`::"
msgstr ""
"Este requisito también se aplicaba anteriormente a clases base abstractas "
"(ABC), tales como :class:`~collections.abc.Iterable`. El problema con esta "
"estrategia es que una clase debía de ser marcada explícitamente para "
"proporcionar esta funcionalidad, lo que resulta poco *pythónico* "
"(idiomático) y poco ajustado a lo que uno normalmente haría en un código "
"Python tipado dinámicamente. Por ejemplo, esto sí se ajusta al :pep:`484`::"

#: ../Doc/library/typing.rst:786
msgid ""
":pep:`544` allows to solve this problem by allowing users to write the above "
"code without explicit base classes in the class definition, allowing "
"``Bucket`` to be implicitly considered a subtype of both ``Sized`` and "
"``Iterable[int]`` by static type checkers. This is known as *structural "
"subtyping* (or static duck-typing)::"
msgstr ""
"El :pep:`544` permite resolver este problema al permitir escribir el código "
"anterior sin una clase base explícita en la definición de la clase, "
"permitiendo que el Validador estático de tipo considere implícitamente que "
"``Bucket`` es un subtipo tanto de ``Sized`` como de ``Iterable[int]``. Esto "
"se conoce como tipado *estructural* (o *duck-typing* estático)::"

#: ../Doc/library/typing.rst:802
msgid ""
"Moreover, by subclassing a special class :class:`Protocol`, a user can "
"define new custom protocols to fully enjoy structural subtyping (see "
"examples below)."
msgstr ""
"Asimismo, creando subclases de la clase especial  :class:`Protocol`, el "
"usuario puede definir nuevos protocolos personalizados y beneficiarse del "
"tipado estructural (véanse los ejemplos de abajo)."

#: ../Doc/library/typing.rst:807
msgid "Module contents"
msgstr "Contenido del módulo"

#: ../Doc/library/typing.rst:809
msgid ""
"The ``typing`` module defines the following classes, functions and "
"decorators."
msgstr ""
"El módulo ``typing`` define las siguientes clases, funciones y decoradores."

#: ../Doc/library/typing.rst:812
msgid "Special typing primitives"
msgstr "Primitivos especiales de tipado"

#: ../Doc/library/typing.rst:815
msgid "Special types"
msgstr "Tipos especiales"

#: ../Doc/library/typing.rst:817
msgid ""
"These can be used as types in annotations. They do not support subscription "
"using ``[]``."
msgstr ""
"Estos pueden ser usados como tipos en anotaciones. No soportan suscripción "
"usando ``[]``."

#: ../Doc/library/typing.rst:822
msgid "Special type indicating an unconstrained type."
msgstr "Tipo especial que indica un tipo sin restricciones."

#: ../Doc/library/typing.rst:824
msgid "Every type is compatible with :data:`Any`."
msgstr "Todos los tipos son compatibles con :data:`Any`."

#: ../Doc/library/typing.rst:825
msgid ":data:`Any` is compatible with every type."
msgstr ":data:`Any` es compatible con todos los tipos."

# ¿Qué signica el uso de "to duck type" como un verbo en este contexto?
#: ../Doc/library/typing.rst:827
msgid ""
":data:`Any` can now be used as a base class. This can be useful for avoiding "
"type checker errors with classes that can duck type anywhere or are highly "
"dynamic."
msgstr ""
"Ahora es posible utilizar :data:`Any` como una clase base. Esto puede ser "
"útil para evitar errores del validador de tipos con clases que pueden hacer "
"uso del *duck typing* en cualquier punto, o que sean altamente dinámicas."

#: ../Doc/library/typing.rst:834
msgid "A :ref:`constrained type variable <typing-constrained-typevar>`."
msgstr "Una :ref:`variables de tipo restringida <typing-constrained-typevar>`."

#: ../Doc/library/typing.rst:836
msgid "Definition::"
msgstr "Definición::"

#: ../Doc/library/typing.rst:840
msgid ""
"``AnyStr`` is meant to be used for functions that may accept :class:`str` "
"or :class:`bytes` arguments but cannot allow the two to mix."
msgstr ""
"``AnyStr`` está pensado para ser utilizado por funciones que pueden aceptar "
"argumentos :class:`str` o :class:`bytes` pero que no puedan permitir que los "
"dos se mezclen."

#: ../Doc/library/typing.rst:843 ../Doc/library/typing.rst:934
#: ../Doc/library/typing.rst:954 ../Doc/library/typing.rst:1011
#: ../Doc/library/typing.rst:1180 ../Doc/library/typing.rst:1237
#: ../Doc/library/typing.rst:1446 ../Doc/library/typing.rst:2813
msgid "For example::"
msgstr "Por ejemplo::"

#: ../Doc/library/typing.rst:852
msgid ""
"Note that, despite its name, ``AnyStr`` has nothing to do with the :class:"
"`Any` type, nor does it mean \"any string\". In particular, ``AnyStr`` and "
"``str | bytes`` are different from each other and have different use cases::"
msgstr ""
"Tenga en cuenta que, a pesar de su nombre, ``AnyStr`` no tiene nada que ver "
"con el tipo :class:`Any`, ni significa “cualquier cadena de caracteres”. En "
"particular, ``AnyStr`` y ``str | bytes`` son diferentes entre sí y tienen "
"diferentes casos de uso::"

#: ../Doc/library/typing.rst:869
msgid "Special type that includes only literal strings."
msgstr "Tipo especial que incluye sólo cadenas de caracteres literales."

#: ../Doc/library/typing.rst:871
msgid ""
"Any string literal is compatible with ``LiteralString``, as is another "
"``LiteralString``. However, an object typed as just ``str`` is not. A string "
"created by composing ``LiteralString``-typed objects is also acceptable as a "
"``LiteralString``."
msgstr ""
"Cualquier cadena de caracteres literal es compatible con ``LiteralString``, "
"al igual que cualquier otro ``LiteralString``. Sin embargo, un objeto cuyo "
"tipo sea simplemente ``str`` no lo es. Una cadena de caracteres creada "
"mediante la composición de objetos cuyo tipo sea ``LiteralString`` también "
"es aceptable como ``LiteralString``."

#: ../Doc/library/typing.rst:877 ../Doc/library/typing.rst:1957
msgid "Example:"
msgstr "Por ejemplo:"

#: ../Doc/library/typing.rst:893
msgid ""
"``LiteralString`` is useful for sensitive APIs where arbitrary user-"
"generated strings could generate problems. For example, the two cases above "
"that generate type checker errors could be vulnerable to an SQL injection "
"attack."
msgstr ""
"``LiteralString`` es útil para API sensibles en las que cadenas de "
"caracteres arbitrarias generadas por el usuario podrían generar problemas. "
"Por ejemplo, los dos casos anteriores que generan errores de verificación de "
"tipos podrían ser vulnerables a un ataque de inyección SQL."

#: ../Doc/library/typing.rst:898
msgid "See :pep:`675` for more details."
msgstr "Véase :pep:`675` para más detalle."

# bottom type?
#: ../Doc/library/typing.rst:904
msgid ""
"The `bottom type <https://en.wikipedia.org/wiki/Bottom_type>`_, a type that "
"has no members."
msgstr ""
"El `bottom type <https://en.wikipedia.org/wiki/Bottom_type>`_ (tipo vacío), "
"es un tipo que no tiene miembros."

#: ../Doc/library/typing.rst:907
msgid ""
"This can be used to define a function that should never be called, or a "
"function that never returns::"
msgstr ""
"Puede ser utilizado para definir una función que nunca debe ser llamada, o "
"una función que nunca retorna::"

#: ../Doc/library/typing.rst:927
msgid ""
"On older Python versions, :data:`NoReturn` may be used to express the same "
"concept. ``Never`` was added to make the intended meaning more explicit."
msgstr ""
"En versiones antiguas de Python, es posible utilizar :data:`NoReturn` para "
"expresar el mismo concepto. Se agregó ``Never`` para hacer más explicito el "
"significado intencionado ."

# se añade valor para matizar que la funcion retorna (retorna el control) pero
# no de manera normal. En el ejemplo lanza una excepción.
#: ../Doc/library/typing.rst:932
msgid "Special type indicating that a function never returns."
msgstr "Tipo especial que indica que una función nunca retorna un valor."

#: ../Doc/library/typing.rst:941
msgid ""
"``NoReturn`` can also be used as a `bottom type <https://en.wikipedia.org/"
"wiki/Bottom_type>`_, a type that has no values. Starting in Python 3.11, "
"the :data:`Never` type should be used for this concept instead. Type "
"checkers should treat the two equivalently."
msgstr ""
"También puede usarse ``NoReturn`` como `bottom type <https://en.wikipedia."
"org/wiki/Bottom_type>`_, un tipo que no tiene valores. Comenzando con Python "
"3.11, debe usarse, en cambio, el tipo :data:`Never` para este concepto. Los "
"Validadores de tipo deben tratar a ambos como equivalentes."

# ¿cómo se le llama en español a una variable "capturada" en una clausura?
#: ../Doc/library/typing.rst:952
msgid "Special type to represent the current enclosed class."
msgstr "Tipo especial que representa la clase capturada actual."

#: ../Doc/library/typing.rst:968
msgid ""
"This annotation is semantically equivalent to the following, albeit in a "
"more succinct fashion::"
msgstr ""
"Esta anotación es semánticamente equivalente a lo siguiente, aunque de una "
"manera más sucinta::"

#: ../Doc/library/typing.rst:980
msgid ""
"In general, if something returns ``self``, as in the above examples, you "
"should use ``Self`` as the return annotation. If ``Foo.return_self`` was "
"annotated as returning ``\"Foo\"``, then the type checker would infer the "
"object returned from ``SubclassOfFoo.return_self`` as being of type ``Foo`` "
"rather than ``SubclassOfFoo``."
msgstr ""
"En general, si algo devuelve ``self``, como en los ejemplos anteriores, se "
"debe utilizar ``Self`` en la  anotación del retorno. Si ``Foo.return_self`` "
"se anotó como que devuelve ``”Foo”``, entonces el validador de tipos "
"inferiría que el objeto devuelto desde ``SubclassOfFoo.return_self`` es del "
"tipo ``Foo`` en lugar de ``SubclassOfFoo``."

#: ../Doc/library/typing.rst:986
msgid "Other common use cases include:"
msgstr "Otros casos de uso comunes incluyen:"

#: ../Doc/library/typing.rst:988
msgid ""
":class:`classmethod`\\s that are used as alternative constructors and return "
"instances of the ``cls`` parameter."
msgstr ""
":class:`classmethod` usados como constructores alternativos y retornan "
"instancias del parámetro ``cls``."

#: ../Doc/library/typing.rst:990
msgid "Annotating an :meth:`~object.__enter__` method which returns self."
msgstr "Anotar un método :meth:`~object.__enter__` que retorna self."

#: ../Doc/library/typing.rst:992
msgid ""
"You should not use ``Self`` as the return annotation if the method is not "
"guaranteed to return an instance of a subclass when the class is subclassed::"
msgstr ""
"No debe utilizar ``Self`` como anotación de retorno si no se garantiza que "
"el método devuelva una instancia de una subclase cuando la clase sea "
"heredada::"

#: ../Doc/library/typing.rst:1003
msgid "See :pep:`673` for more details."
msgstr "Véase :pep:`673` para más detalle."

#: ../Doc/library/typing.rst:1009
msgid ""
"Special annotation for explicitly declaring a :ref:`type alias <type-"
"aliases>`."
msgstr ""
"Anotación especial para declarar explícitamente un :ref:`alias de tipo <type-"
"aliases>`."

#: ../Doc/library/typing.rst:1017
msgid ""
"``TypeAlias`` is particularly useful on older Python versions for annotating "
"aliases that make use of forward references, as it can be hard for type "
"checkers to distinguish these from normal variable assignments:"
msgstr ""
"``TypeAlias`` es particularmente útil en versiones anteriores de Python para "
"anotar alias que utilizan referencias para versiones posteriores, ya que "
"puede ser difícil para los validadores de tipos distinguirlos de las "
"asignaciones de variables normales:"

#: ../Doc/library/typing.rst:1037
msgid "See :pep:`613` for more details."
msgstr "Ver :pep:`613` para más detalle."

#: ../Doc/library/typing.rst:1041
msgid ""
":data:`TypeAlias` is deprecated in favor of the :keyword:`type` statement, "
"which creates instances of :class:`TypeAliasType` and which natively "
"supports forward references. Note that while :data:`TypeAlias` and :class:"
"`TypeAliasType` serve similar purposes and have similar names, they are "
"distinct and the latter is not the type of the former. Removal of :data:"
"`TypeAlias` is not currently planned, but users are encouraged to migrate "
"to :keyword:`type` statements."
msgstr ""
":data:`TypeAlias` ha sido descontinuado en favor de la declaración :keyword:"
"`type`, la cual crea instancias de :class:`TypeAliasType` y que admite de "
"forma nativa referencias de versiones posteriores de Python. Tenga en cuenta "
"que, si bien :data:`TypeAlias` y :class:`TypeAliasType` tienen propósitos "
"similares y tienen nombres similares, son distintos y el último no es el "
"tipo del primero. La eliminación de :data:`TypeAlias` no está prevista "
"actualmente, pero se recomienda a los usuarios que migren a las "
"declaraciones :keyword:`type`."

#: ../Doc/library/typing.rst:1052
msgid "Special forms"
msgstr "Formas especiales"

#: ../Doc/library/typing.rst:1054
msgid ""
"These can be used as types in annotations. They all support subscription "
"using ``[]``, but each has a unique syntax."
msgstr ""
"Estos se pueden utilizar como tipos en anotaciones. Todos admiten la "
"suscripción mediante ``[]``, pero cada uno tiene una sintaxis única."

#: ../Doc/library/typing.rst:1059
msgid ""
"Union type; ``Union[X, Y]`` is equivalent to ``X | Y`` and means either X or "
"Y."
msgstr ""
"Tipo de unión; ``Union[X, Y]`` es equivalente a ``X | Y`` y significa X o Y."

#: ../Doc/library/typing.rst:1061
msgid ""
"To define a union, use e.g. ``Union[int, str]`` or the shorthand ``int | "
"str``. Using that shorthand is recommended. Details:"
msgstr ""
"Para definir una unión, use p. ej. ``Union[int, str]`` o la abreviatura "
"``int | str``. Se recomienda el uso de la abreviatura. Detalles:"

#: ../Doc/library/typing.rst:1063
msgid "The arguments must be types and there must be at least one."
msgstr "Los argumentos deben ser tipos y haber al menos uno."

#: ../Doc/library/typing.rst:1065
msgid "Unions of unions are flattened, e.g.::"
msgstr "Las uniones de uniones se simplifican (se aplanan), p. ej.::"

#: ../Doc/library/typing.rst:1069
msgid "Unions of a single argument vanish, e.g.::"
msgstr "Las uniones con un solo argumento se eliminan, p. ej.::"

#: ../Doc/library/typing.rst:1073
msgid "Redundant arguments are skipped, e.g.::"
msgstr "Argumentos repetidos se omiten, p. ej.::"

#: ../Doc/library/typing.rst:1077
msgid "When comparing unions, the argument order is ignored, e.g.::"
msgstr ""
"Cuando se comparan uniones, el orden de los argumentos se ignoran, p. ej.::"

#: ../Doc/library/typing.rst:1081
msgid "You cannot subclass or instantiate a ``Union``."
msgstr "No es posible crear una subclase o instanciar un ``Union``."

#: ../Doc/library/typing.rst:1083
msgid "You cannot write ``Union[X][Y]``."
msgstr "No es posible escribir ``Union[X][Y]``."

#: ../Doc/library/typing.rst:1085
msgid "Don't remove explicit subclasses from unions at runtime."
msgstr "No elimina subclases explícitas de una unión en tiempo de ejecución."

#: ../Doc/library/typing.rst:1088
msgid ""
"Unions can now be written as ``X | Y``. See :ref:`union type "
"expressions<types-union>`."
msgstr ""
"Las uniones ahora se pueden escribir como ``X | Y``. Consulte :ref:`union "
"type expressions<types-union>`."

#: ../Doc/library/typing.rst:1094
msgid "``Optional[X]`` is equivalent to ``X | None`` (or ``Union[X, None]``)."
msgstr "``Optional[X]`` es equivalente a ``X | None`` (o ``Union[X, None]``)."

#: ../Doc/library/typing.rst:1096
msgid ""
"Note that this is not the same concept as an optional argument, which is one "
"that has a default.  An optional argument with a default does not require "
"the ``Optional`` qualifier on its type annotation just because it is "
"optional. For example::"
msgstr ""
"Nótese que no es lo mismo que un argumento opcional, que es aquel que tiene "
"un valor por defecto. Un argumento opcional con un valor por defecto no "
"necesita el indicador ``Optional`` en su anotación de tipo simplemente por "
"que sea opcional. Por ejemplo::"

#: ../Doc/library/typing.rst:1104
msgid ""
"On the other hand, if an explicit value of ``None`` is allowed, the use of "
"``Optional`` is appropriate, whether the argument is optional or not. For "
"example::"
msgstr ""
"Por otro lado, si se permite un valor ``None``, es apropiado el uso de "
"``Optional``, independientemente de que sea opcional o no. Por ejemplo::"

#: ../Doc/library/typing.rst:1111
msgid ""
"Optional can now be written as ``X | None``. See :ref:`union type "
"expressions<types-union>`."
msgstr ""
"Optional ahora se puede escribir como ``X | None``. Consulte :ref:`union "
"type expressions<types-union>`."

#: ../Doc/library/typing.rst:1117
msgid "Special form for annotating higher-order functions."
msgstr "Forma especial para anotar funciones de orden superior."

#: ../Doc/library/typing.rst:1119
msgid ""
"``Concatenate`` can be used in conjunction with :ref:`Callable <annotating-"
"callables>` and :class:`ParamSpec` to annotate a higher-order callable which "
"adds, removes, or transforms parameters of another callable.  Usage is in "
"the form ``Concatenate[Arg1Type, Arg2Type, ..., ParamSpecVariable]``. "
"``Concatenate`` is currently only valid when used as the first argument to "
"a :ref:`Callable <annotating-callables>`. The last parameter to "
"``Concatenate`` must be a :class:`ParamSpec` or ellipsis (``...``)."
msgstr ""
"``Concatenate`` se puede utilizar junto con :ref:`Callable <annotating-"
"callables>` y :class:`ParamSpec` para anotar un objeto invocable de orden "
"superior que agrega, elimina o transforma parámetros de otro objeto "
"invocable. El uso se realiza en el formato ``Concatenate[Arg1Type, "
"Arg2Type, ..., ParamSpecVariable]``. ``Concatenate`` actualmente solo es "
"válido cuando se utiliza como primer argumento de un :ref:`Callable "
"<annotating-callables>`. El último parámetro de ``Concatenate`` debe ser un :"
"class:`ParamSpec` o elipsis."

#: ../Doc/library/typing.rst:1128
msgid ""
"For example, to annotate a decorator ``with_lock`` which provides a :class:"
"`threading.Lock` to the decorated function,  ``Concatenate`` can be used to "
"indicate that ``with_lock`` expects a callable which takes in a ``Lock`` as "
"the first argument, and returns a callable with a different type signature.  "
"In this case, the :class:`ParamSpec` indicates that the returned callable's "
"parameter types are dependent on the parameter types of the callable being "
"passed in::"
msgstr ""
"Por ejemplo, para anotar un decorador ``with_lock`` que proporciona un :"
"class:`threading.Lock` a la función decorada, ``Concatenate`` puede usarse "
"para indicar que ``with_lock`` espera un invocable que toma un ``Lock`` como "
"primer argumento y retorna un invocable con un tipo de firma diferente. En "
"este caso, el :class:`ParamSpec` indica que los tipos de parámetros de los "
"invocables retornados dependen de los tipos de parámetros de los invocables "
"que se pasan en ::"

#: ../Doc/library/typing.rst:1167 ../Doc/library/typing.rst:1925
msgid ""
":pep:`612` -- Parameter Specification Variables (the PEP which introduced "
"``ParamSpec`` and ``Concatenate``)"
msgstr ""
":pep:`612` - Variables de especificación de parámetros (el PEP que introdujo "
"``ParamSpec`` y ``Concatenate``)"

#: ../Doc/library/typing.rst:1169
msgid ":class:`ParamSpec`"
msgstr ":class:`ParamSpec`"

#: ../Doc/library/typing.rst:1170 ../Doc/library/typing.rst:1928
msgid ":ref:`annotating-callables`"
msgstr ":ref:`annotating-callables`"

#: ../Doc/library/typing.rst:1174
msgid "Special typing form to define \"literal types\"."
msgstr "Tipo especial que solo incluye cadenas literales."

#: ../Doc/library/typing.rst:1176
msgid ""
"``Literal`` can be used to indicate to type checkers that the annotated "
"object has a value equivalent to one of the provided literals."
msgstr ""
"``Literal`` se puede utilizar para indicar a los validadores de tipos que el "
"objeto anotado tiene un valor equivalente a uno de los literales "
"proporcionados."

#: ../Doc/library/typing.rst:1192
msgid ""
"``Literal[...]`` cannot be subclassed. At runtime, an arbitrary value is "
"allowed as type argument to ``Literal[...]``, but type checkers may impose "
"restrictions. See :pep:`586` for more details about literal types."
msgstr ""
"``Literal[...]`` no puede ser derivado. En tiempo de ejecución, se permite "
"un valor arbitrario como argumento de tipo de ``Literal[...]``, pero los "
"validadores de tipos pueden imponer sus restricciones. Véase :pep:`585` para "
"más detalles sobre tipos literales."

#: ../Doc/library/typing.rst:1198
msgid ""
"``Literal`` now de-duplicates parameters.  Equality comparisons of "
"``Literal`` objects are no longer order dependent. ``Literal`` objects will "
"now raise a :exc:`TypeError` exception during equality comparisons if one of "
"their parameters are not :term:`hashable`."
msgstr ""
"``Literal`` ahora elimina los parámetros duplicados. Las comparaciones de "
"igualdad de los objetos ``Literal`` ya no dependen del orden. Los objetos "
"``Literal`` ahora lanzarán una excepción :exc:`TypeError` durante las "
"comparaciones de igualdad si uno de sus parámetros no es :term:`hashable`."

#: ../Doc/library/typing.rst:1206
msgid "Special type construct to mark class variables."
msgstr "Construcción especial para tipado para marcar variables de clase."

# Puede haber una entrada mejor para "As introduced"
#: ../Doc/library/typing.rst:1208
msgid ""
"As introduced in :pep:`526`, a variable annotation wrapped in ClassVar "
"indicates that a given attribute is intended to be used as a class variable "
"and should not be set on instances of that class. Usage::"
msgstr ""
"Tal y como introduce :pep:`526`, una anotación de variable rodeada por "
"ClassVar indica que la intención de un atributo dado es ser usado como "
"variable de clase y que no debería ser modificado en las instancias de esa "
"misma clase. Uso::"

# subscribed se substituye por niveles de subindice
#: ../Doc/library/typing.rst:1216
msgid ":data:`ClassVar` accepts only types and cannot be further subscribed."
msgstr ""
":data:`ClassVar` solo acepta tipos y no admite más niveles de subíndices."

#: ../Doc/library/typing.rst:1218
msgid ""
":data:`ClassVar` is not a class itself, and should not be used with :func:"
"`isinstance` or :func:`issubclass`. :data:`ClassVar` does not change Python "
"runtime behavior, but it can be used by third-party type checkers. For "
"example, a type checker might flag the following code as an error::"
msgstr ""
":data:`ClassVar` no es un clase en sí misma, y no debe ser usado con :func:"
"`isinstance` o :func:`issubclass`. :data:`ClassVar` no modifica el "
"comportamiento de Python en tiempo de ejecución pero puede ser utilizado por "
"validadores de terceros. Por ejemplo, un validador de tipos puede marcar el "
"siguiente código como erróneo::"

#: ../Doc/library/typing.rst:1232
msgid "Special typing construct to indicate final names to type checkers."
msgstr ""
"Construcción de tipado especial para indicar nombres finales a los "
"validadores de tipos."

#: ../Doc/library/typing.rst:1234
msgid ""
"Final names cannot be reassigned in any scope. Final names declared in class "
"scopes cannot be overridden in subclasses."
msgstr ""
"Los nombres finales no se pueden reasignar en ningún ámbito. Los nombres "
"finales declarados en ámbitos de clase no se pueden anular en subclases."

#: ../Doc/library/typing.rst:1248 ../Doc/library/typing.rst:2829
msgid ""
"There is no runtime checking of these properties. See :pep:`591` for more "
"details."
msgstr ""
"No hay comprobación en tiempo de ejecución para estas propiedades. Véase :"
"pep:`591` para más detalles."

#: ../Doc/library/typing.rst:1255
msgid "Special typing construct to mark a :class:`TypedDict` key as required."
msgstr ""
"Construcción de tipado especial para marcar una clave :class:`TypedDict` "
"como requerida."

#: ../Doc/library/typing.rst:1257
msgid ""
"This is mainly useful for ``total=False`` TypedDicts. See :class:`TypedDict` "
"and :pep:`655` for more details."
msgstr ""
"Esto es útil principalmente para TypedDicts ``total=False``. Vea :class:"
"`TypedDict` y :pep:`655` para obtener más detalles."

#: ../Doc/library/typing.rst:1264
msgid ""
"Special typing construct to mark a :class:`TypedDict` key as potentially "
"missing."
msgstr ""
"Construcción de tipado especial para marcar una clave :class:`TypedDict` "
"como potencialmente faltante."

#: ../Doc/library/typing.rst:1267
msgid "See :class:`TypedDict` and :pep:`655` for more details."
msgstr "Véase :class:`TypedDict` y :pep:`655` para más detalle."

#: ../Doc/library/typing.rst:1273
msgid "Special typing form to add context-specific metadata to an annotation."
msgstr ""
"Forma de escritura especial para agregar metadatos específicos del contexto "
"a una anotación."

#: ../Doc/library/typing.rst:1275
msgid ""
"Add metadata ``x`` to a given type ``T`` by using the annotation "
"``Annotated[T, x]``. Metadata added using ``Annotated`` can be used by "
"static analysis tools or at runtime. At runtime, the metadata is stored in "
"a :attr:`!__metadata__` attribute."
msgstr ""
"Agregue metadatos ``x`` a un tipo ``T`` determinado mediante la anotación "
"``Annotated[T, x]``. Los metadatos agregados mediante ``Annotated`` pueden "
"usarse con herramientas de análisis estático o en tiempo de ejecución. En "
"tiempo de ejecución, los metadatos se almacenan en un atributo :attr:`!"
"__metadata__`."

#: ../Doc/library/typing.rst:1280
msgid ""
"If a library or tool encounters an annotation ``Annotated[T, x]`` and has no "
"special logic for the metadata, it should ignore the metadata and simply "
"treat the annotation as ``T``. As such, ``Annotated`` can be useful for code "
"that wants to use annotations for purposes outside Python's static typing "
"system."
msgstr ""
"Si una biblioteca o herramienta encuentra una anotación ``Annotated[T, x]`` "
"y no tiene una lógica especial para los metadatos, debe ignorar los "
"metadatos y simplemente tratar la anotación como ``T``. Como tal, "
"``Annotated`` puede ser útil para el código que desea usar anotaciones para "
"fines fuera del sistema de tipado estático de Python."

#: ../Doc/library/typing.rst:1286
msgid ""
"Using ``Annotated[T, x]`` as an annotation still allows for static "
"typechecking of ``T``, as type checkers will simply ignore the metadata "
"``x``. In this way, ``Annotated`` differs from the :func:`@no_type_check "
"<no_type_check>` decorator, which can also be used for adding annotations "
"outside the scope of the typing system, but completely disables typechecking "
"for a function or class."
msgstr ""
"El uso de ``Annotated[T, x]`` como anotación aún permite la verificación de "
"tipos estática de ``T``, ya que los validadores de tipos simplemente "
"ignorarán los metadatos ``x``. De esta manera, ``Annotated`` difiere del "
"decorador :func:`@no_type_check <no_type_check>`, que también se puede usar "
"para agregar anotaciones fuera del alcance del sistema de tipado, pero "
"deshabilita por completo la verificación de tipos para una función o clase."

#: ../Doc/library/typing.rst:1293
msgid ""
"The responsibility of how to interpret the metadata lies with the the tool "
"or library encountering an ``Annotated`` annotation. A tool or library "
"encountering an ``Annotated`` type can scan through the metadata elements to "
"determine if they are of interest (e.g., using :func:`isinstance`)."
msgstr ""
"La responsabilidad de cómo interpretar los metadatos recae en la herramienta "
"o biblioteca que encuentre la anotación ``Annotated``. Una herramienta o "
"biblioteca que encuentra un tipo ``Annotated`` puede examinar los elementos "
"de metadatos para determinar si son de interés (por ejemplo, utilizando :"
"func:`isinstance`)."

#: ../Doc/library/typing.rst:1301
msgid ""
"Here is an example of how you might use ``Annotated`` to add metadata to "
"type annotations if you were doing range analysis:"
msgstr ""
"A continuación se muestra un ejemplo de cómo podría utilizar ``Annotated`` "
"para agregar metadatos a las anotaciones de tipo si estuviera realizando un "
"análisis de rango:"

#: ../Doc/library/typing.rst:1314
msgid "Details of the syntax:"
msgstr "Detalles de la sintaxis:"

#: ../Doc/library/typing.rst:1316
msgid "The first argument to ``Annotated`` must be a valid type"
msgstr "El primer argumento en ``Annotated`` debe ser un tipo válido"

#: ../Doc/library/typing.rst:1318
msgid ""
"Multiple metadata elements can be supplied (``Annotated`` supports variadic "
"arguments)::"
msgstr ""
"Se pueden proporcionar varios elementos de metadatos (``Annotated`` admite "
"argumentos variádicos):"

#: ../Doc/library/typing.rst:1327
msgid ""
"It is up to the tool consuming the annotations to decide whether the client "
"is allowed to add multiple metadata elements to one annotation and how to "
"merge those annotations."
msgstr ""
"Depende de la herramienta que consume las anotaciones decidir si el cliente "
"puede agregar varios elementos de metadatos a una anotación y cómo fusionar "
"esas anotaciones."

#: ../Doc/library/typing.rst:1331
msgid ""
"``Annotated`` must be subscripted with at least two arguments "
"( ``Annotated[int]`` is not valid)"
msgstr ""
"``Annotated`` debe estar subscrito con al menos dos argumentos "
"( ``Annotated[int]`` no es válido)"

#: ../Doc/library/typing.rst:1334
msgid ""
"The order of the metadata elements is preserved and matters for equality "
"checks::"
msgstr ""
"El orden de los elementos de metadatos se conserva y es importante para las "
"comprobaciones de igualdad::"

#: ../Doc/library/typing.rst:1341
msgid ""
"Nested ``Annotated`` types are flattened. The order of the metadata elements "
"starts with the innermost annotation::"
msgstr ""
"Los tipos anidados ``Annotated`` se aplanan. El orden de los elementos de "
"metadatos comienza con la anotación más interna::"

#: ../Doc/library/typing.rst:1348
msgid "Duplicated metadata elements are not removed::"
msgstr "Los elementos de metadatos duplicados no se eliminan:"

#: ../Doc/library/typing.rst:1354
msgid "``Annotated`` can be used with nested and generic aliases:"
msgstr "``Annotated`` se puede utilizar con alias anidados y genéricos:"

#: ../Doc/library/typing.rst:1368
msgid "``Annotated`` cannot be used with an unpacked :class:`TypeVarTuple`::"
msgstr ""
"No se puede utilizar ``Annotated`` con un :class:`TypeVarTuple` "
"descomprimido::"

#: ../Doc/library/typing.rst:1372
msgid "This would be equivalent to::"
msgstr "Esto sería equivalente a:"

#: ../Doc/library/typing.rst:1376
msgid ""
"where ``T1``, ``T2``, etc. are :class:`TypeVars <TypeVar>`. This would be "
"invalid: only one type should be passed to Annotated."
msgstr ""
"donde ``T1``, ``T2``, etc. son :class:`TypeVars <TypeVar>`. Esto no sería "
"válido: solo se debe pasar un tipo a ``Annotated``."

#: ../Doc/library/typing.rst:1379
msgid ""
"By default, :func:`get_type_hints` strips the metadata from annotations. "
"Pass ``include_extras=True`` to have the metadata preserved:"
msgstr ""
"De forma predeterminada, :func:`get_type_hints` elimina los metadatos de las "
"anotaciones. Pase ``include_extras=True`` para conservar los metadatos:"

#: ../Doc/library/typing.rst:1392
msgid ""
"At runtime, the metadata associated with an ``Annotated`` type can be "
"retrieved via the :attr:`!__metadata__` attribute:"
msgstr ""
"En tiempo de ejecución, los metadatos asociados con un tipo ``Annotated`` se "
"pueden recuperar a través del atributo :attr:`!__metadata__`:"

#: ../Doc/library/typing.rst:1406
msgid ":pep:`593` - Flexible function and variable annotations"
msgstr ":pep:`593` - Anotaciones flexibles de funciones y variables"

#: ../Doc/library/typing.rst:1407
msgid "The PEP introducing ``Annotated`` to the standard library."
msgstr "El PEP introduce ``Annotated`` en la biblioteca estándar."

#: ../Doc/library/typing.rst:1414
msgid "Special typing construct for marking user-defined type guard functions."
msgstr ""
"Construcción de tipado especial para marcar funciones de protección de tipo "
"definidas por el usuario."

#: ../Doc/library/typing.rst:1416
msgid ""
"``TypeGuard`` can be used to annotate the return type of a user-defined type "
"guard function.  ``TypeGuard`` only accepts a single type argument. At "
"runtime, functions marked this way should return a boolean."
msgstr ""
"``TypeGuard`` se puede utilizar para anotar el tipo de retorno de una "
"función de protección de tipo definida por el usuario. ``TypeGuard`` solo "
"acepta un único argumento de tipo. En tiempo de ejecución, las funciones "
"marcadas de esta manera deben devolver un valor booleano."

#: ../Doc/library/typing.rst:1420
msgid ""
"``TypeGuard`` aims to benefit *type narrowing* -- a technique used by static "
"type checkers to determine a more precise type of an expression within a "
"program's code flow.  Usually type narrowing is done by analyzing "
"conditional code flow and applying the narrowing to a block of code.  The "
"conditional expression here is sometimes referred to as a \"type guard\"::"
msgstr ""
"``TypeGuard`` tiene como objetivo beneficiar a *type narrowing*, una técnica "
"utilizada por los validadores de tipo estático para determinar un tipo más "
"preciso de una expresión dentro del flujo de código de un programa. Por lo "
"general, el estrechamiento de tipos se realiza analizando el flujo de código "
"condicional y aplicando el estrechamiento a un bloque de código. La "
"expresión condicional aquí a veces se denomina \"protección de tipo\":"

#: ../Doc/library/typing.rst:1435
msgid ""
"Sometimes it would be convenient to use a user-defined boolean function as a "
"type guard.  Such a function should use ``TypeGuard[...]`` as its return "
"type to alert static type checkers to this intention."
msgstr ""
"A veces sería conveniente utilizar una función booleana definida por el "
"usuario como protección de tipos. Dicha función debería usar "
"``TypeGuard[...]`` como su tipo de retorno para alertar a los validadores de "
"tipo estático sobre esta intención."

#: ../Doc/library/typing.rst:1439
msgid ""
"Using  ``-> TypeGuard`` tells the static type checker that for a given "
"function:"
msgstr ""
"El uso de ``-> TypeGuard`` le dice al validador de tipo estático que para "
"una función determinada:"

#: ../Doc/library/typing.rst:1442
msgid "The return value is a boolean."
msgstr "El valor de retorno es un booleano."

#: ../Doc/library/typing.rst:1443
msgid ""
"If the return value is ``True``, the type of its argument is the type inside "
"``TypeGuard``."
msgstr ""
"Si el valor de retorno es ``True``, el tipo de su argumento es el tipo "
"dentro de ``TypeGuard``."

#: ../Doc/library/typing.rst:1460
msgid ""
"If ``is_str_list`` is a class or instance method, then the type in "
"``TypeGuard`` maps to the type of the second parameter after ``cls`` or "
"``self``."
msgstr ""
"Si ``is_str_list`` es un método de clase o instancia, entonces el tipo en "
"``TypeGuard`` se asigna al tipo del segundo parámetro después de ``cls`` o "
"``self``."

#: ../Doc/library/typing.rst:1464
msgid ""
"In short, the form ``def foo(arg: TypeA) -> TypeGuard[TypeB]: ...``, means "
"that if ``foo(arg)`` returns ``True``, then ``arg`` narrows from ``TypeA`` "
"to ``TypeB``."
msgstr ""
"En resumen, la forma ``def foo(arg: TypeA) -> TypeGuard[TypeB]: ...`` "
"significa que si ``foo(arg)`` retorna ``True``, entonces ``arg`` se estrecha "
"de ``TypeA`` a ``TypeB``."

#: ../Doc/library/typing.rst:1470
msgid ""
"``TypeB`` need not be a narrower form of ``TypeA`` -- it can even be a wider "
"form. The main reason is to allow for things like narrowing ``list[object]`` "
"to ``list[str]`` even though the latter is not a subtype of the former, "
"since ``list`` is invariant. The responsibility of writing type-safe type "
"guards is left to the user."
msgstr ""
"No es necesario que ``TypeB`` sea una forma más estrecha de ``TypeA``; "
"incluso puede ser una forma más amplia. La razón principal es permitir cosas "
"como reducir ``List[object]`` a ``List[str]`` aunque este último no sea un "
"subtipo del primero, ya que ``List`` es invariante. La responsabilidad de "
"escribir protecciones de tipo seguras se deja al usuario."

#: ../Doc/library/typing.rst:1476
msgid ""
"``TypeGuard`` also works with type variables.  See :pep:`647` for more "
"details."
msgstr ""
"``TypeGuard`` también funciona con variables de tipo. Véase :pep:`647` para "
"más detalles."

#: ../Doc/library/typing.rst:1483
msgid "Typing operator to conceptually mark an object as having been unpacked."
msgstr ""
"Tipado para marcar conceptualmente un objeto como si hubiera sido "
"desempaquetado."

#: ../Doc/library/typing.rst:1485
msgid ""
"For example, using the unpack operator ``*`` on a :class:`type variable "
"tuple <TypeVarTuple>` is equivalent to using ``Unpack`` to mark the type "
"variable tuple as having been unpacked::"
msgstr ""
"Por ejemplo, usar el operador de desempaquetamiento ``*`` en una :class:"
"`tupla de variable de tipo <TypeVarTuple>` es equivalente a usar ``Unpack`` "
"para marcar la tupla de variable de tipo como desempaquetada::"

#: ../Doc/library/typing.rst:1494
msgid ""
"In fact, ``Unpack`` can be used interchangeably with ``*`` in the context "
"of :class:`typing.TypeVarTuple <TypeVarTuple>` and :class:`builtins.tuple "
"<tuple>` types. You might see ``Unpack`` being used explicitly in older "
"versions of Python, where ``*`` couldn't be used in certain places::"
msgstr ""
"De hecho, ``Unpack`` se puede usar indistintamente con ``*`` en el contexto "
"de los tipos :class:`typing.TypeVarTuple <TypeVarTuple>` y :class:`builtins."
"tuple <tuple>`. Es posible que veas que ``Unpack`` se usa explícitamente en "
"versiones anteriores de Python, donde ``*`` no se podía usar en ciertos "
"lugares::"

#: ../Doc/library/typing.rst:1508
msgid ""
"``Unpack`` can also be used along with :class:`typing.TypedDict` for typing "
"``**kwargs`` in a function signature::"
msgstr ""
"``Unpack`` también se puede usar junto con :class:`typing.TypedDict` para "
"tipear ``**kwargs`` en una firma de función::"

#: ../Doc/library/typing.rst:1521
msgid ""
"See :pep:`692` for more details on using ``Unpack`` for ``**kwargs`` typing."
msgstr ""
"Consulte :pep:`692` para obtener más información sobre el uso de ``Unpack`` "
"para tipear ``**kwargs``."

#: ../Doc/library/typing.rst:1526
msgid "Building generic types and type aliases"
msgstr "Creación de tipos genéricos y alias de tipos"

#: ../Doc/library/typing.rst:1528
msgid ""
"The following classes should not be used directly as annotations. Their "
"intended purpose is to be building blocks for creating generic types and "
"type aliases."
msgstr ""
"Las siguientes clases no se deben utilizar directamente como anotaciones. Su "
"finalidad es servir de bloques de construcción para crear tipos genéricos y "
"alias de tipos."

#: ../Doc/library/typing.rst:1532
msgid ""
"These objects can be created through special syntax (:ref:`type parameter "
"lists <type-params>` and the :keyword:`type` statement). For compatibility "
"with Python 3.11 and earlier, they can also be created without the dedicated "
"syntax, as documented below."
msgstr ""
"Estos objetos se pueden crear mediante una sintaxis especial (:ref:`type "
"parameter lists <type-params>` y la declaración :keyword:`type`). Para "
"compatibilidad con Python 3.11 y versiones anteriores, también se pueden "
"crear sin la sintaxis dedicada, como se documenta a continuación."

#: ../Doc/library/typing.rst:1539
msgid "Abstract base class for generic types."
msgstr "Clase base abstracta para tipos genéricos."

#: ../Doc/library/typing.rst:1541
msgid ""
"A generic type is typically declared by adding a list of type parameters "
"after the class name::"
msgstr ""
"Un tipo genérico normalmente se declara agregando una lista de parámetros de "
"tipo después del nombre de la clase:"

#: ../Doc/library/typing.rst:1549
msgid ""
"Such a class implicitly inherits from ``Generic``. The runtime semantics of "
"this syntax are discussed in the :ref:`Language Reference <generic-classes>`."
msgstr ""
"Esta clase hereda implícitamente de ``Generic``. La semántica de tiempo de "
"ejecución de esta sintaxis se analiza en la :ref:`Referencia del lenguaje "
"<generic-classes>`."

#: ../Doc/library/typing.rst:1553
msgid "This class can then be used as follows::"
msgstr "Entonces, esta clase se puede usar como sigue::"

#: ../Doc/library/typing.rst:1561
msgid ""
"Here the brackets after the function name indicate a :ref:`generic function "
"<generic-functions>`."
msgstr ""
"Aquí los corchetes después del nombre de la función indican una :ref:"
"`función genérica <generic-functions>`."

#: ../Doc/library/typing.rst:1564
msgid ""
"For backwards compatibility, generic classes can also be declared by "
"explicitly inheriting from ``Generic``. In this case, the type parameters "
"must be declared separately::"
msgstr ""
"Para compatibilidad con versiones anteriores, las clases genéricas también "
"se pueden declarar heredando explícitamente de ``Generic``. En este caso, "
"los parámetros de tipo se deben declarar por separado:"

#: ../Doc/library/typing.rst:1579
msgid "Type variable."
msgstr "Variable de tipo."

#: ../Doc/library/typing.rst:1581
msgid ""
"The preferred way to construct a type variable is via the dedicated syntax "
"for :ref:`generic functions <generic-functions>`, :ref:`generic classes "
"<generic-classes>`, and :ref:`generic type aliases <generic-type-aliases>`::"
msgstr ""
"La forma preferida de construir una variable de tipo es a través de la "
"sintaxis dedicada para :ref:`funciones genéricas <generic-functions>`, :ref:"
"`clases genéricas <generic-classes>` y :ref:`alias de tipo genérico <generic-"
"type-aliases>`::"

#: ../Doc/library/typing.rst:1589
msgid ""
"This syntax can also be used to create bound and constrained type variables::"
msgstr ""
"Esta sintaxis también se puede utilizar para crear variables de tipo "
"enlazadas y restringidas:"

#: ../Doc/library/typing.rst:1599
msgid ""
"However, if desired, reusable type variables can also be constructed "
"manually, like so::"
msgstr ""
"Sin embargo, si se desea, también se pueden construir manualmente variables "
"de tipo reutilizables, de la siguiente manera:"

#: ../Doc/library/typing.rst:1605
msgid ""
"Type variables exist primarily for the benefit of static type checkers.  "
"They serve as the parameters for generic types as well as for generic "
"function and type alias definitions. See :class:`Generic` for more "
"information on generic types.  Generic functions work as follows::"
msgstr ""
"Las variables de tipo existen principalmente para el beneficio de los "
"validadores de tipos estáticos. Sirven como parámetros para tipos genéricos, "
"así como para definiciones de alias de tipo y funciones genéricas. Consulte :"
"class:`Generic` para obtener más información sobre tipos genéricos. Las "
"funciones genéricas funcionan de la siguiente manera::"

#: ../Doc/library/typing.rst:1626
msgid ""
"Note that type variables can be *bound*, *constrained*, or neither, but "
"cannot be both bound *and* constrained."
msgstr ""
"Nótese que las variables de tipo pueden ser *bound* (delimitadas), "
"*constrained* (restringidas), o ninguna, pero no pueden ser al mismo tiempo "
"delimitadas *y* restringidas."

#: ../Doc/library/typing.rst:1629
msgid ""
"The variance of type variables is inferred by type checkers when they are "
"created through the :ref:`type parameter syntax <type-params>` or when "
"``infer_variance=True`` is passed. Manually created type variables may be "
"explicitly marked covariant or contravariant by passing ``covariant=True`` "
"or ``contravariant=True``. By default, manually created type variables are "
"invariant. See :pep:`484` and :pep:`695` for more details."
msgstr ""
"La varianza de las variables de tipo es inferida por los validadores de tipo "
"cuando se crean a través de la :ref:`sintáxis de parámetros de tipo <type-"
"params>` o cuando se pasa ``infer_variance=True``. Las variables de tipo "
"creadas manualmente se pueden marcar explícitamente como covariantes o "
"contravariantes al pasar ``covariant=True`` o ``contravariant=True``. De "
"manera predeterminada, las variables de tipo creadas manualmente son "
"invariantes. Consulte :pep:`484` y :pep:`695` para obtener más detalles."

#: ../Doc/library/typing.rst:1637
msgid ""
"Bound type variables and constrained type variables have different semantics "
"in several important ways. Using a *bound* type variable means that the "
"``TypeVar`` will be solved using the most specific type possible::"
msgstr ""
"Las variables de tipo delimitadas y las variables de tipo restringidas "
"tienen semánticas distintas en varios aspectos importantes. Usar una "
"variable de tipo *bound* (delimitada) significa que la ``TypeVar`` será "
"resuelta utilizando el tipo más específico posible::"

#: ../Doc/library/typing.rst:1652
msgid ""
"Type variables can be bound to concrete types, abstract types (ABCs or "
"protocols), and even unions of types::"
msgstr ""
"Las variables de tipo pueden estar delimitadas por tipos concretos, tipos "
"abstractos (ABCs o *protocols*) e incluso uniones de tipos::"

#: ../Doc/library/typing.rst:1664
msgid ""
"Using a *constrained* type variable, however, means that the ``TypeVar`` can "
"only ever be solved as being exactly one of the constraints given::"
msgstr ""
"Sin embargo, usar una variable de tipo *constrained* significa que la "
"``TypeVar`` sólo podrá ser determinada como exactamente una de las "
"restricciones dadas::"

#: ../Doc/library/typing.rst:1675
msgid "At runtime, ``isinstance(x, T)`` will raise :exc:`TypeError`."
msgstr "En tiempo de ejecución, ``isinstance(x, T)`` lanzará :exc:`TypeError`."

#: ../Doc/library/typing.rst:1679
msgid "The name of the type variable."
msgstr "El nombre de la variable de tipo."

#: ../Doc/library/typing.rst:1683
msgid "Whether the type var has been explicitly marked as covariant."
msgstr "Si la variable de tipo ha sido marcado explícitamente como covariante."

#: ../Doc/library/typing.rst:1687
msgid "Whether the type var has been explicitly marked as contravariant."
msgstr "Si la variable de tipo ha sido marcado explícitamente como covariante."

#: ../Doc/library/typing.rst:1691
msgid ""
"Whether the type variable's variance should be inferred by type checkers."
msgstr ""
"Si los validadores de tipo deben inferir la variación de la variable de tipo."

#: ../Doc/library/typing.rst:1697
msgid "The bound of the type variable, if any."
msgstr "El límite de la variable de tipo, si existe."

#: ../Doc/library/typing.rst:1701
msgid ""
"For type variables created through :ref:`type parameter syntax <type-"
"params>`, the bound is evaluated only when the attribute is accessed, not "
"when the type variable is created (see :ref:`lazy-evaluation`)."
msgstr ""
"Para las variables de tipo creadas a través de :ref:`sintáxis de parámetros "
"de tipo <type-params>`, el límite se evalúa solo cuando se accede al "
"atributo, no cuando se crea la variable de tipo (consulte :ref:`lazy-"
"evaluation`)."

#: ../Doc/library/typing.rst:1707
msgid "A tuple containing the constraints of the type variable, if any."
msgstr ""
"Una tupla que contiene las restricciones de la variable de tipo, si las hay."

#: ../Doc/library/typing.rst:1711
msgid ""
"For type variables created through :ref:`type parameter syntax <type-"
"params>`, the constraints are evaluated only when the attribute is accessed, "
"not when the type variable is created (see :ref:`lazy-evaluation`)."
msgstr ""
"Para las variables de tipo creadas a través de la :ref:`sintáxis de "
"parámetros de tipo <type-params>`, las restricciones se evalúan solo cuando "
"se accede al atributo, no cuando se crea la variable de tipo (consulte :ref:"
"`lazy-evaluation`)."

#: ../Doc/library/typing.rst:1717
msgid ""
"Type variables can now be declared using the :ref:`type parameter <type-"
"params>` syntax introduced by :pep:`695`. The ``infer_variance`` parameter "
"was added."
msgstr ""
"Ahora es posible declarar variables de tipo utilizando la sintaxis de :ref:"
"`parámetros de tipo <type-params>` introducida por :pep:`695`. Se agregó el "
"parámetro ``infer_variance``."

#: ../Doc/library/typing.rst:1723
msgid ""
"Type variable tuple. A specialized form of :class:`type variable <TypeVar>` "
"that enables *variadic* generics."
msgstr ""
"Tupla de variables de tipo. Una versión especializada de :class:`type "
"variables <TypeVar>` que permite genéricos *variádicos*."

#: ../Doc/library/typing.rst:1726
msgid ""
"Type variable tuples can be declared in :ref:`type parameter lists <type-"
"params>` using a single asterisk (``*``) before the name::"
msgstr ""
"Las tuplas de variables de tipo se pueden declarar en :ref:`listas de "
"parámetros de tipo <type-params>` usando un solo asterisco (``*``) antes del "
"nombre::"

#: ../Doc/library/typing.rst:1732
msgid "Or by explicitly invoking the ``TypeVarTuple`` constructor::"
msgstr "O invocando explícitamente el constructor ``TypeVarTuple``::"

#: ../Doc/library/typing.rst:1740
msgid ""
"A normal type variable enables parameterization with a single type. A type "
"variable tuple, in contrast, allows parameterization with an *arbitrary* "
"number of types by acting like an *arbitrary* number of type variables "
"wrapped in a tuple. For example::"
msgstr ""
"Una variable de tipo normal permite parametrizar con un solo tipo. Una tupla "
"de variables de tipo, en contraste, permite la parametrización con un número "
"*arbitrario* de tipos, al actuar como un número *arbitrario* de variables de "
"tipo envueltas en una tupla. Por ejemplo::"

#: ../Doc/library/typing.rst:1762
msgid ""
"Note the use of the unpacking operator ``*`` in ``tuple[T, *Ts]``. "
"Conceptually, you can think of ``Ts`` as a tuple of type variables ``(T1, "
"T2, ...)``. ``tuple[T, *Ts]`` would then become ``tuple[T, *(T1, "
"T2, ...)]``, which is equivalent to ``tuple[T, T1, T2, ...]``. (Note that in "
"older versions of Python, you might see this written using :data:`Unpack "
"<Unpack>` instead, as ``Unpack[Ts]``.)"
msgstr ""
"Nótese el uso del operador de desempaquetado ``*`` en ``tuple[T, *Ts]``. "
"Conceptualmente, puede pensarse en ``Ts`` como una tupla de variables de "
"tipo ``(T1, T2, ...)``. ``tuple[T, *Ts]`` se convertiría en ``tuple[T, *(T1, "
"T2, ...)]``, lo que es equivalente a ``tuple[T, T1, T2, ...]``. (Nótese que "
"en versiones más antiguas de Python, ésto puede verse escrito usando en "
"cambio :data:`Unpack <Unpack>`, en la forma ``Unpack[Ts]``.)"

#: ../Doc/library/typing.rst:1770
msgid ""
"Type variable tuples must *always* be unpacked. This helps distinguish type "
"variable tuples from normal type variables::"
msgstr ""
"Las tuplas de variables de tipo *siempre* deben descomprimirse. Esto ayuda a "
"distinguir las tuplas de variables de tipo, de las variables de tipo "
"normales:"

#: ../Doc/library/typing.rst:1777
msgid ""
"Type variable tuples can be used in the same contexts as normal type "
"variables. For example, in class definitions, arguments, and return types::"
msgstr ""
"Las tuplas de variables de tipo pueden ser utilizadas en los mismos "
"contextos que las variables de tipo normales. Por ejemplo en definiciones de "
"clases, argumentos y tipos de retorno::"

#: ../Doc/library/typing.rst:1785
msgid ""
"Type variable tuples can be happily combined with normal type variables:"
msgstr ""
"Las tuplas de variables de tipo se pueden combinar sin problemas con "
"variables de tipo normales:"

#: ../Doc/library/typing.rst:1801
msgid ""
"However, note that at most one type variable tuple may appear in a single "
"list of type arguments or type parameters::"
msgstr ""
"Sin embargo, nótese que en una determinada lista de argumentos de tipo o de "
"parámetros de tipo puede haber como máximo una tupla de variables de tipo::"

#: ../Doc/library/typing.rst:1808
msgid ""
"Finally, an unpacked type variable tuple can be used as the type annotation "
"of ``*args``::"
msgstr ""
"Finalmente, una tupla de variables de tipo desempaquetada puede ser "
"utilizada como la anotación de tipo de ``*args``::"

#: ../Doc/library/typing.rst:1818
msgid ""
"In contrast to non-unpacked annotations of ``*args`` - e.g. ``*args: int``, "
"which would specify that *all* arguments are ``int`` - ``*args: *Ts`` "
"enables reference to the types of the *individual* arguments in ``*args``. "
"Here, this allows us to ensure the types of the ``*args`` passed to "
"``call_soon`` match the types of the (positional) arguments of ``callback``."
msgstr ""
"En contraste con las anotaciones no-desempaquetadas de ``*args``, por ej. "
"``*args: int``, que especificaría que *todos* los argumentos son ``int`` - "
"``*args: *Ts`` permite referenciar los tipos de los argumentos "
"*individuales* en ``*args``. Aquí, ésto permite asegurarse de que los tipos "
"de los ``*args`` que son pasados a ``call_soon`` calcen con los tipos de los "
"argumentos (posicionales) de ``callback``."

#: ../Doc/library/typing.rst:1825
msgid "See :pep:`646` for more details on type variable tuples."
msgstr ""
"Véase :pep:`646` para obtener más detalles sobre las tuplas de variables de "
"tipo."

#: ../Doc/library/typing.rst:1829
msgid "The name of the type variable tuple."
msgstr "El nombre de la tupla de variables de tipo."

#: ../Doc/library/typing.rst:1835
msgid ""
"Type variable tuples can now be declared using the :ref:`type parameter "
"<type-params>` syntax introduced by :pep:`695`."
msgstr ""
"Ahora es posible declarar tuplas de variables de tipo utilizando la sintaxis "
"de :ref:`parámetros de tipo <type-params>` introducida por :pep:`695`."

#: ../Doc/library/typing.rst:1840
msgid ""
"Parameter specification variable.  A specialized version of :class:`type "
"variables <TypeVar>`."
msgstr ""
"Variable de especificación de parámetros. Una versión especializada de :"
"class:`type variables <TypeVar>`."

#: ../Doc/library/typing.rst:1843
msgid ""
"In :ref:`type parameter lists <type-params>`, parameter specifications can "
"be declared with two asterisks (``**``)::"
msgstr ""
"En las :ref:`listas de parámetros de tipo <type-params>`, las "
"especificaciones de parámetros se pueden declarar con dos asteriscos "
"(``**``)::"

#: ../Doc/library/typing.rst:1848
msgid ""
"For compatibility with Python 3.11 and earlier, ``ParamSpec`` objects can "
"also be created as follows::"
msgstr ""
"Para compatibilidad con Python 3.11 y versiones anteriores, los objetos "
"``ParamSpec`` también se pueden crear de la siguiente manera:"

#: ../Doc/library/typing.rst:1853
msgid ""
"Parameter specification variables exist primarily for the benefit of static "
"type checkers.  They are used to forward the parameter types of one callable "
"to another callable -- a pattern commonly found in higher order functions "
"and decorators.  They are only valid when used in ``Concatenate``, or as the "
"first argument to ``Callable``, or as parameters for user-defined Generics.  "
"See :class:`Generic` for more information on generic types."
msgstr ""
"Las variables de especificación de parámetros existen principalmente para el "
"beneficio de los validadores de tipo estático. Se utilizan para reenviar los "
"tipos de parámetros de un invocable a otro invocable, un patrón que se "
"encuentra comúnmente en funciones y decoradores de orden superior. Solo son "
"válidos cuando se utilizan en ``Concatenate``, o como primer argumento de "
"``Callable``, o como parámetros para genéricos definidos por el usuario. "
"Consulte :class:`Generic` para obtener más información sobre tipos genéricos."

#: ../Doc/library/typing.rst:1860
msgid ""
"For example, to add basic logging to a function, one can create a decorator "
"``add_logging`` to log function calls.  The parameter specification variable "
"tells the type checker that the callable passed into the decorator and the "
"new callable returned by it have inter-dependent type parameters::"
msgstr ""
"Por ejemplo, para agregar un registro básico a una función, se puede crear "
"un decorador ``add_logging`` para registrar llamadas a funciones. La "
"variable de especificación de parámetros le dice al validador de tipo que el "
"invocable pasado al decorador y el nuevo invocable retornado por él tienen "
"parámetros de tipo interdependientes:"

#: ../Doc/library/typing.rst:1880
msgid ""
"Without ``ParamSpec``, the simplest way to annotate this previously was to "
"use a :class:`TypeVar` with bound ``Callable[..., Any]``.  However this "
"causes two problems:"
msgstr ""
"Sin ``ParamSpec``, la forma más sencilla de anotar esto anteriormente era "
"usar un :class:`TypeVar` con ``Callable[..., Any]`` enlazado. Sin embargo, "
"esto causa dos problemas:"

#: ../Doc/library/typing.rst:1884
msgid ""
"The type checker can't type check the ``inner`` function because ``*args`` "
"and ``**kwargs`` have to be typed :data:`Any`."
msgstr ""
"El validador de tipo no puede verificar la función ``inner`` porque "
"``*args`` y ``**kwargs`` deben escribirse :data:`Any`."

#: ../Doc/library/typing.rst:1886
msgid ""
":func:`~cast` may be required in the body of the ``add_logging`` decorator "
"when returning the ``inner`` function, or the static type checker must be "
"told to ignore the ``return inner``."
msgstr ""
"Es posible que se requiera :func:`~cast` en el cuerpo del decorador "
"``add_logging`` al retornar la función ``inner``, o se debe indicar al "
"validador de tipo estático que ignore el ``return inner``."

#: ../Doc/library/typing.rst:1893
msgid ""
"Since ``ParamSpec`` captures both positional and keyword parameters, ``P."
"args`` and ``P.kwargs`` can be used to split a ``ParamSpec`` into its "
"components.  ``P.args`` represents the tuple of positional parameters in a "
"given call and should only be used to annotate ``*args``.  ``P.kwargs`` "
"represents the mapping of keyword parameters to their values in a given "
"call, and should be only be used to annotate ``**kwargs``.  Both attributes "
"require the annotated parameter to be in scope. At runtime, ``P.args`` and "
"``P.kwargs`` are instances respectively of :class:`ParamSpecArgs` and :class:"
"`ParamSpecKwargs`."
msgstr ""
"Dado que ``ParamSpec`` captura tanto parámetros posicionales como de "
"palabras clave, ``P.args`` y ``P.kwargs`` se pueden utilizar para dividir un "
"``ParamSpec`` en sus componentes. ``P.args`` representa la tupla de "
"parámetros posicionales en una llamada determinada y solo debe usarse para "
"anotar ``*args``. ``P.kwargs`` representa la asignación de parámetros de "
"palabras clave a sus valores en una llamada determinada y solo debe usarse "
"para anotar ``**kwargs``. Ambos atributos requieren que el parámetro anotado "
"esté dentro del alcance. En tiempo de ejecución, ``P.args`` y ``P.kwargs`` "
"son instancias respectivamente de :class:`ParamSpecArgs` y :class:"
"`ParamSpecKwargs`."

#: ../Doc/library/typing.rst:1905
msgid "The name of the parameter specification."
msgstr "El nombre de la especificación del parámetro."

#: ../Doc/library/typing.rst:1907
msgid ""
"Parameter specification variables created with ``covariant=True`` or "
"``contravariant=True`` can be used to declare covariant or contravariant "
"generic types.  The ``bound`` argument is also accepted, similar to :class:"
"`TypeVar`.  However the actual semantics of these keywords are yet to be "
"decided."
msgstr ""
"Las variables de especificación de parámetros creadas con ``covariant=True`` "
"o ``contravariant=True`` se pueden utilizar para declarar tipos genéricos "
"covariantes o contravariantes. También se acepta el argumento ``bound``, "
"similar a :class:`TypeVar`. Sin embargo, la semántica real de estas palabras "
"clave aún no se ha decidido."

#: ../Doc/library/typing.rst:1917
msgid ""
"Parameter specifications can now be declared using the :ref:`type parameter "
"<type-params>` syntax introduced by :pep:`695`."
msgstr ""
"Las especificaciones de parámetros ahora se pueden declarar utilizando la "
"sintaxis de :ref:`parámetros de tipo <type-params>` introducida por :pep:"
"`695`."

#: ../Doc/library/typing.rst:1921
msgid ""
"Only parameter specification variables defined in global scope can be "
"pickled."
msgstr ""
"Solo las variables de especificación de parámetros definidas en el ámbito "
"global pueden ser serializadas."

#: ../Doc/library/typing.rst:1927
msgid ":data:`Concatenate`"
msgstr ":data:`Concatenate`"

#: ../Doc/library/typing.rst:1933
msgid ""
"Arguments and keyword arguments attributes of a :class:`ParamSpec`. The ``P."
"args`` attribute of a ``ParamSpec`` is an instance of ``ParamSpecArgs``, and "
"``P.kwargs`` is an instance of ``ParamSpecKwargs``. They are intended for "
"runtime introspection and have no special meaning to static type checkers."
msgstr ""
"Argumentos y atributos de argumentos de palabras clave de un :class:"
"`ParamSpec`. El atributo ``P.args`` de un ``ParamSpec`` es una instancia de "
"``ParamSpecArgs`` y ``P.kwargs`` es una instancia de ``ParamSpecKwargs``. "
"Están pensados para la introspección en tiempo de ejecución y no tienen un "
"significado especial para los validadores de tipo estático."

#: ../Doc/library/typing.rst:1938
msgid ""
"Calling :func:`get_origin` on either of these objects will return the "
"original ``ParamSpec``:"
msgstr ""
"Llamar a :func:`get_origin` en cualquiera de estos objetos retornará el "
"``ParamSpec`` original:"

#: ../Doc/library/typing.rst:1955
msgid "The type of type aliases created through the :keyword:`type` statement."
msgstr ""
"El tipo de alias de tipo creado a través de la declaración :keyword:`type`."

#: ../Doc/library/typing.rst:1969
msgid "The name of the type alias:"
msgstr "El nombre del alias de tipo:"

#: ../Doc/library/typing.rst:1979
msgid "The module in which the type alias was defined::"
msgstr "El módulo en el que se definió el alias de tipo::"

#: ../Doc/library/typing.rst:1987
msgid ""
"The type parameters of the type alias, or an empty tuple if the alias is not "
"generic:"
msgstr ""
"Los parámetros de tipo del alias de tipo, o una tupla vacía si el alias no "
"es genérico:"

#: ../Doc/library/typing.rst:2001
msgid ""
"The type alias's value. This is :ref:`lazily evaluated <lazy-evaluation>`, "
"so names used in the definition of the alias are not resolved until the "
"``__value__`` attribute is accessed:"
msgstr ""
"El valor del alias de tipo. Se :ref:`evalúa de forma diferida <lazy-"
"evaluation>`, por lo que los nombres utilizados en la definición del alias "
"no se resuelven hasta que se accede al atributo ``__value__``:"

#: ../Doc/library/typing.rst:2019
msgid "Other special directives"
msgstr "Otras directivas especiales"

#: ../Doc/library/typing.rst:2021
msgid ""
"These functions and classes should not be used directly as annotations. "
"Their intended purpose is to be building blocks for creating and declaring "
"types."
msgstr ""
"Estas funciones y clases no se deben utilizar directamente como anotaciones. "
"Su finalidad es servir de bloques de construcción para crear y declarar "
"tipos."

#: ../Doc/library/typing.rst:2027
msgid "Typed version of :func:`collections.namedtuple`."
msgstr "Versión para anotación de tipos de :func:`collections.namedtuple`."

#: ../Doc/library/typing.rst:2029 ../Doc/library/typing.rst:2106
#: ../Doc/library/typing.rst:3055
msgid "Usage::"
msgstr "Uso::"

#: ../Doc/library/typing.rst:2035
msgid "This is equivalent to::"
msgstr "Esto es equivalente a::"

#: ../Doc/library/typing.rst:2039
msgid ""
"To give a field a default value, you can assign to it in the class body::"
msgstr ""
"Para proporcionar a un campo un valor por defecto se puede asignar en el "
"cuerpo de la clase::"

#: ../Doc/library/typing.rst:2048
msgid ""
"Fields with a default value must come after any fields without a default."
msgstr ""
"Los campos con un valor por defecto deben ir después de los campos sin valor "
"por defecto."

#: ../Doc/library/typing.rst:2050
msgid ""
"The resulting class has an extra attribute ``__annotations__`` giving a dict "
"that maps the field names to the field types.  (The field names are in the "
"``_fields`` attribute and the default values are in the ``_field_defaults`` "
"attribute, both of which are part of the :func:`~collections.namedtuple` "
"API.)"
msgstr ""
"La clase resultante tiene un atributo extra ``__annotations__`` que "
"proporciona un diccionario que mapea el nombre de los campos con sus "
"respectivos tipos. (Los nombres de los campos están en el atributo "
"``_fields`` y sus valores por defecto en el atributo ``_field_defaults``, "
"ambos parte de la API :func:`~collections.namedtuple`.)"

#: ../Doc/library/typing.rst:2056
msgid "``NamedTuple`` subclasses can also have docstrings and methods::"
msgstr ""
"Las subclases de ``NamedTuple`` también pueden tener *docstrings* y métodos::"

#: ../Doc/library/typing.rst:2066
msgid "``NamedTuple`` subclasses can be generic::"
msgstr "Las subclases de ``NamedTuple`` pueden ser genéricas::"

#: ../Doc/library/typing.rst:2072
msgid "Backward-compatible usage::"
msgstr "Uso retrocompatible::"

#: ../Doc/library/typing.rst:2082
msgid "Added support for :pep:`526` variable annotation syntax."
msgstr ""
"Soporte añadido para la sintaxis de anotación de variables propuesto en :pep:"
"`526`."

#: ../Doc/library/typing.rst:2085
msgid "Added support for default values, methods, and docstrings."
msgstr "Soporte añadido para valores por defecto, métodos y *docstrings*."

#: ../Doc/library/typing.rst:2088
msgid ""
"The ``_field_types`` and ``__annotations__`` attributes are now regular "
"dictionaries instead of instances of ``OrderedDict``."
msgstr ""
"Los atributos ``_field_types`` y ``__annotations__`` son simples "
"diccionarios en vez de instancias de ``OrderedDict``."

#: ../Doc/library/typing.rst:2092
msgid ""
"Removed the ``_field_types`` attribute in favor of the more standard "
"``__annotations__`` attribute which has the same information."
msgstr ""
"Se remueve el atributo ``_field_types`` en favor del atributo más estándar "
"``__annotations__`` que tiene la misma información."

#: ../Doc/library/typing.rst:2096
msgid "Added support for generic namedtuples."
msgstr "Se agrega soporte para *namedtuples* genéricas."

#: ../Doc/library/typing.rst:2101
msgid "Helper class to create low-overhead :ref:`distinct types <distinct>`."
msgstr ""
"Clase auxiliar para crear :ref:`tipos distintos <distinct>` con bajo consumo "
"de recursos."

#: ../Doc/library/typing.rst:2103
msgid ""
"A ``NewType`` is considered a distinct type by a typechecker. At runtime, "
"however, calling a ``NewType`` returns its argument unchanged."
msgstr ""
"Un validador de tipos considera que un ``NewType`` es un tipo distinto. Sin "
"embargo, en tiempo de ejecución, llamar a un ``NewType`` devuelve su "
"argumento sin cambios."

#: ../Doc/library/typing.rst:2113
msgid "The module in which the new type is defined."
msgstr "El módulo en el que se define el nuevo tipo."

#: ../Doc/library/typing.rst:2117
msgid "The name of the new type."
msgstr "El nombre del nuevo tipo."

#: ../Doc/library/typing.rst:2121
msgid "The type that the new type is based on."
msgstr "El tipo en el que se basa el nuevo tipo."

#: ../Doc/library/typing.rst:2125
msgid "``NewType`` is now a class rather than a function."
msgstr "``NewType`` es ahora una clase en lugar de una función."

#: ../Doc/library/typing.rst:2130
msgid "Base class for protocol classes."
msgstr "Clase base para clases de protocolo."

#: ../Doc/library/typing.rst:2132
msgid "Protocol classes are defined like this::"
msgstr "Las clases de protocolo se definen así::"

#: ../Doc/library/typing.rst:2138
msgid ""
"Such classes are primarily used with static type checkers that recognize "
"structural subtyping (static duck-typing), for example::"
msgstr ""
"Tales clases son usadas principalmente con validadores estáticos de tipos "
"que detectan subtipado estructural (*duck-typing* estático), por ejemplo::"

#: ../Doc/library/typing.rst:2150
msgid ""
"See :pep:`544` for more details. Protocol classes decorated with :func:"
"`runtime_checkable` (described later) act as simple-minded runtime protocols "
"that check only the presence of given attributes, ignoring their type "
"signatures."
msgstr ""
"Véase :pep:`544` para más detalles. Las clases protocolo decoradas con :func:"
"`runtime_checkable` (descrito más adelante) se comportan como protocolos "
"simplistas en tiempo de ejecución que solo comprueban la presencia de "
"atributos dados, ignorando su firma de tipo."

#: ../Doc/library/typing.rst:2155
msgid "Protocol classes can be generic, for example::"
msgstr "Las clases protocolo pueden ser genéricas, por ejemplo::"

#: ../Doc/library/typing.rst:2161
msgid ""
"In code that needs to be compatible with Python 3.11 or older, generic "
"Protocols can be written as follows::"
msgstr ""
"En el código que necesita ser compatible con Python 3.11 o anterior, los "
"protocolos genéricos se pueden escribir de la siguiente manera:"

#: ../Doc/library/typing.rst:2174
msgid "Mark a protocol class as a runtime protocol."
msgstr ""
"Marca una clase protocolo como aplicable en tiempo de ejecución (lo "
"convierte en un *runtime protocol*)."

#: ../Doc/library/typing.rst:2176
msgid ""
"Such a protocol can be used with :func:`isinstance` and :func:`issubclass`. "
"This raises :exc:`TypeError` when applied to a non-protocol class.  This "
"allows a simple-minded structural check, very similar to \"one trick "
"ponies\" in :mod:`collections.abc` such as :class:`~collections.abc."
"Iterable`.  For example::"
msgstr ""
"Tal protocolo se puede usar con :func:`isinstance` y :func:`issubclass`. "
"Esto lanzará una excepción :exc:`TypeError` cuando se aplique a una clase "
"que no es un protocolo. Esto permite una comprobación estructural simple, "
"muy semejante a \"one trick ponies\" en :mod:`collections.abc` con :class:"
"`Iterable`. Por ejemplo::"

#: ../Doc/library/typing.rst:2196
msgid ""
":func:`!runtime_checkable` will check only the presence of the required "
"methods or attributes, not their type signatures or types. For example, :"
"class:`ssl.SSLObject` is a class, therefore it passes an :func:`issubclass` "
"check against :ref:`Callable <annotating-callables>`. However, the ``ssl."
"SSLObject.__init__`` method exists only to raise a :exc:`TypeError` with a "
"more informative message, therefore making it impossible to call "
"(instantiate) :class:`ssl.SSLObject`."
msgstr ""
":func:`!runtime_checkable` comprobará únicamente la presencia de los métodos "
"o atributos requeridos, no sus firmas de tipo o tipos. Por ejemplo, :class:"
"`ssl.SSLObject` es una clase, por lo tanto, pasa una comprobación :func:"
"`issubclass` contra :ref:`Callable <annotating-callables>`. Sin embargo, el "
"método ``ssl.SSLObject.__init__`` existe únicamente para generar un :exc:"
"`TypeError` con un mensaje más informativo, por lo que es imposible llamar "
"(instanciar) :class:`ssl.SSLObject`."

#: ../Doc/library/typing.rst:2207
msgid ""
"An :func:`isinstance` check against a runtime-checkable protocol can be "
"surprisingly slow compared to an ``isinstance()`` check against a non-"
"protocol class. Consider using alternative idioms such as :func:`hasattr` "
"calls for structural checks in performance-sensitive code."
msgstr ""
"Una verificación :func:`isinstance` contra un protocolo comprobable en "
"tiempo de ejecución puede ser sorprendentemente lenta en comparación con una "
"verificación ``isinstance()`` contra una clase que no es de protocolo. "
"Considere utilizar expresiones alternativas como llamadas :func:`hasattr` "
"para comprobaciones estructurales en código sensible al rendimiento."

#: ../Doc/library/typing.rst:2215
msgid ""
"The internal implementation of :func:`isinstance` checks against runtime-"
"checkable protocols now uses :func:`inspect.getattr_static` to look up "
"attributes (previously, :func:`hasattr` was used). As a result, some objects "
"which used to be considered instances of a runtime-checkable protocol may no "
"longer be considered instances of that protocol on Python 3.12+, and vice "
"versa. Most users are unlikely to be affected by this change."
msgstr ""
"La implementación interna de las comprobaciones de :func:`isinstance` con "
"protocolos que se pueden comprobar en tiempo de ejecución ahora utiliza :"
"func:`inspect.getattr_static` para buscar atributos (anteriormente, se "
"utilizaba :func:`hasattr`). Como resultado, algunos objetos que solían "
"considerarse instancias de un protocolo que se podía comprobar en tiempo de "
"ejecución ya no se consideran instancias de ese protocolo en Python 3.12+, y "
"viceversa. Es poco probable que la mayoría de los usuarios se vean afectados "
"por este cambio."

#: ../Doc/library/typing.rst:2224
msgid ""
"The members of a runtime-checkable protocol are now considered \"frozen\" at "
"runtime as soon as the class has been created. Monkey-patching attributes "
"onto a runtime-checkable protocol will still work, but will have no impact "
"on :func:`isinstance` checks comparing objects to the protocol. See :ref:"
"`\"What's new in Python 3.12\" <whatsnew-typing-py312>` for more details."
msgstr ""
"Los miembros de un protocolo que se pueden comprobar en tiempo de ejecución "
"ahora se consideran \"congelados\" en tiempo de ejecución tan pronto como se "
"crea la clase. La aplicación de parches de  atributos en un protocolo que se "
"puede comprobar en tiempo de ejecución seguirá funcionando, pero no tendrá "
"ningún impacto en las comprobaciones de :func:`isinstance` que comparan "
"objetos con el protocolo. Consulte :ref:`\"¿Qué hay de nuevo en Python "
"3.12\" <whatsnew-typing-py312>` para obtener más detalles."

#: ../Doc/library/typing.rst:2235
msgid ""
"Special construct to add type hints to a dictionary. At runtime it is a "
"plain :class:`dict`."
msgstr ""
"Es una construcción especial para añadir indicadores de tipo a un "
"diccionario. En tiempo de ejecución es un :class:`dict` simple."

# sinonimo para imposicion/imponer
#: ../Doc/library/typing.rst:2238
msgid ""
"``TypedDict`` declares a dictionary type that expects all of its instances "
"to have a certain set of keys, where each key is associated with a value of "
"a consistent type. This expectation is not checked at runtime but is only "
"enforced by type checkers. Usage::"
msgstr ""
"``TypedDict`` crea un tipo de diccionario que espera que todas sus "
"instancias tenga un cierto conjunto de claves, donde cada clave está "
"asociada con un valor de un tipo determinado. Esta exigencia no se comprueba "
"en tiempo de ejecución y solo es aplicada por validadores de tipo. Uso::"

#: ../Doc/library/typing.rst:2254
msgid ""
"To allow using this feature with older versions of Python that do not "
"support :pep:`526`, ``TypedDict`` supports two additional equivalent "
"syntactic forms:"
msgstr ""
"Para permitir el uso de esta característica con versiones más antiguas de "
"Python que no tienen soporte para :pep:`526`, ``TypedDict`` soporta "
"adicionalmente dos formas sintácticas equivalentes:"

#: ../Doc/library/typing.rst:2258
msgid "Using a literal :class:`dict` as the second argument::"
msgstr "El uso de un :class:`dict` literal como segundo argumento::"

#: ../Doc/library/typing.rst:2262
msgid "Using keyword arguments::"
msgstr "El uso de argumentos nombrados::"

#: ../Doc/library/typing.rst:2269
msgid ""
"The keyword-argument syntax is deprecated in 3.11 and will be removed in "
"3.13. It may also be unsupported by static type checkers."
msgstr ""
"La sintaxis de argumentos nombrados está obsoleta desde la versión 3.11 y "
"será removida en la versión 3.13. Además, podría no estar soportada por los "
"validadores estáticos de tipo."

#: ../Doc/library/typing.rst:2270
msgid ""
"The functional syntax should also be used when any of the keys are not "
"valid :ref:`identifiers <identifiers>`, for example because they are "
"keywords or contain hyphens. Example::"
msgstr ""
"También es preferible el uso de la sintaxis funcional cuando cualquiera de "
"las llaves no sean :ref:`identifiers<identifiers>` válidos, por ejemplo "
"porque son palabras clave o contienen guiones. Ejemplo::"

#: ../Doc/library/typing.rst:2282
msgid ""
"By default, all keys must be present in a ``TypedDict``. It is possible to "
"mark individual keys as non-required using :data:`NotRequired`::"
msgstr ""
"De forma predeterminada, todas las llaves deben estar presentes en un "
"``TypedDict``. Es posible marcar llaves individuales como *no requeridas* "
"utilizando :data:`NotRequired`::"

#: ../Doc/library/typing.rst:2293
msgid ""
"This means that a ``Point2D`` ``TypedDict`` can have the ``label`` key "
"omitted."
msgstr ""
"Esto significa que en un ``TypedDict`` que sea una instancia de ``Point2D``, "
"será posible omitir la llave ``label``."

#: ../Doc/library/typing.rst:2296
msgid ""
"It is also possible to mark all keys as non-required by default by "
"specifying a totality of ``False``::"
msgstr ""
"Además, es posible marcar todas las llaves como no-requeridas por defecto, "
"al especificar un valor de ``False`` en el argumento *total*::"

#: ../Doc/library/typing.rst:2306
msgid ""
"This means that a ``Point2D`` ``TypedDict`` can have any of the keys "
"omitted. A type checker is only expected to support a literal ``False`` or "
"``True`` as the value of the ``total`` argument. ``True`` is the default, "
"and makes all items defined in the class body required."
msgstr ""
"Esto significa que un ``TypedDict`` ``Point2D`` puede tener cualquiera de "
"las llaves omitidas. Solo se espera que un validador de tipo admita un "
"``False`` literal o ``True`` como valor del argumento ``total``. ``True`` es "
"el predeterminado y hace que todos los elementos definidos en el cuerpo de "
"la clase sean obligatorios."

#: ../Doc/library/typing.rst:2311
msgid ""
"Individual keys of a ``total=False`` ``TypedDict`` can be marked as required "
"using :data:`Required`::"
msgstr ""
"Las llaves individuales de un ``TypedDict`` ``total=False`` pueden ser "
"marcadas como requeridas utilizando :data:`Required`::"

#: ../Doc/library/typing.rst:2326
msgid ""
"It is possible for a ``TypedDict`` type to inherit from one or more other "
"``TypedDict`` types using the class-based syntax. Usage::"
msgstr ""
"Es posible que un tipo ``TypedDict`` herede de uno o más tipos ``TypedDict`` "
"usando la sintaxis de clase. Uso::"

#: ../Doc/library/typing.rst:2333
msgid ""
"``Point3D`` has three items: ``x``, ``y`` and ``z``. It is equivalent to "
"this definition::"
msgstr ""
"``Point3D`` tiene tres elementos: ``x``, ``y`` y ``z``. Lo que es "
"equivalente a la siguiente definición::"

#: ../Doc/library/typing.rst:2341
msgid ""
"A ``TypedDict`` cannot inherit from a non-\\ ``TypedDict`` class, except "
"for :class:`Generic`. For example::"
msgstr ""
"Un ``TypedDict`` no puede heredar de una clase que no sea una subclase de "
"``TypedDict``, exceptuando :class:`Generic`. Por ejemplo::"

#: ../Doc/library/typing.rst:2356
msgid "A ``TypedDict`` can be generic::"
msgstr "Un ``TypedDict`` puede ser genérico::"

#: ../Doc/library/typing.rst:2362
msgid ""
"To create a generic ``TypedDict`` that is compatible with Python 3.11 or "
"lower, inherit from :class:`Generic` explicitly:"
msgstr ""
"Para crear un ``TypedDict`` genérico que sea compatible con Python 3.11 o "
"anterior, herede de :class:`Generic` explícitamente:"

#: ../Doc/library/typing.rst:2373
msgid ""
"A ``TypedDict`` can be introspected via annotations dicts (see :ref:"
"`annotations-howto` for more information on annotations best practices), :"
"attr:`__total__`, :attr:`__required_keys__`, and :attr:`__optional_keys__`."
msgstr ""
"Es posible introspectar un ``TypedDict`` a través de diccionarios de "
"anotaciones (véase\n"
" :ref:`annotations-howto` para más información acerca de mejores prácticas "
"de anotaciones), :attr:`__total__`, :attr:`__required_keys__`, y :attr:"
"`__optional_keys__`."

#: ../Doc/library/typing.rst:2379
msgid ""
"``Point2D.__total__`` gives the value of the ``total`` argument. Example:"
msgstr ""
"``Point2D.__total__`` proporciona el valor del argumento ``total``. Ejemplo:"

#: ../Doc/library/typing.rst:2401
msgid ""
"``Point2D.__required_keys__`` and ``Point2D.__optional_keys__`` return :"
"class:`frozenset` objects containing required and non-required keys, "
"respectively."
msgstr ""
"``Point2D.__required_keys__`` y ``Point2D.__optional_keys__`` retornan "
"objetos de la clase :class:`frozenset`, que contienen las llaves requeridas "
"y no requeridas, respectivamente."

#: ../Doc/library/typing.rst:2404
msgid ""
"Keys marked with :data:`Required` will always appear in "
"``__required_keys__`` and keys marked with :data:`NotRequired` will always "
"appear in ``__optional_keys__``."
msgstr ""
"Las llaves marcadas con :data:`Required` siempre aparecerán en "
"``__required_keys__`` y las llaves marcadas con :data:`NotRequired` siempre "
"aparecerán en ``__optional_keys__``."

#: ../Doc/library/typing.rst:2407
msgid ""
"For backwards compatibility with Python 3.10 and below, it is also possible "
"to use inheritance to declare both required and non-required keys in the "
"same ``TypedDict`` . This is done by declaring a ``TypedDict`` with one "
"value for the ``total`` argument and then inheriting from it in another "
"``TypedDict`` with a different value for ``total``:"
msgstr ""
"Para compatibilidad con versiones anteriores de Python 3.10, también es "
"posible usar la herencia para declarar claves obligatorias y no obligatorias "
"en el mismo ``TypedDict``. Esto se hace declarando un ``TypedDict`` con un "
"valor para el argumento ``total`` y luego heredando de él en otro "
"``TypedDict`` con un valor diferente para ``total``:"

#: ../Doc/library/typing.rst:2430
msgid ""
"See :pep:`589` for more examples and detailed rules of using ``TypedDict``."
msgstr ""
"Véase :pep:`589` para más ejemplos y reglas detalladas del uso de "
"``TypedDict``."

#: ../Doc/library/typing.rst:2434
msgid ""
"Added support for marking individual keys as :data:`Required` or :data:"
"`NotRequired`. See :pep:`655`."
msgstr ""
"Se agrega soporte para marcar llaves individuales como :data:`Required` o :"
"data:`NotRequired`. Véase :pep:`655`."

#: ../Doc/library/typing.rst:2438
msgid "Added support for generic ``TypedDict``\\ s."
msgstr "Se agrega soporte para ``TypedDict`` genéricos."

#: ../Doc/library/typing.rst:2442
msgid "Protocols"
msgstr "Protocolos"

#: ../Doc/library/typing.rst:2444
msgid ""
"The following protocols are provided by the typing module. All are decorated "
"with :func:`@runtime_checkable <runtime_checkable>`."
msgstr ""
"El módulo de tipado proporciona los siguientes protocolos. Todos están "
"decorados con :func:`@runtime_checkable <runtime_checkable>`."

#: ../Doc/library/typing.rst:2449
msgid ""
"An ABC with one abstract method ``__abs__`` that is covariant in its return "
"type."
msgstr ""
"Una ABC con un método abstracto ``__abs__`` que es covariante en su tipo "
"retornado."

#: ../Doc/library/typing.rst:2454
msgid "An ABC with one abstract method ``__bytes__``."
msgstr "Una ABC con un método abstracto ``__bytes__``."

#: ../Doc/library/typing.rst:2458
msgid "An ABC with one abstract method ``__complex__``."
msgstr "Una ABC con un método abstracto ``__complex__``."

#: ../Doc/library/typing.rst:2462
msgid "An ABC with one abstract method ``__float__``."
msgstr "Una ABC con un método abstracto ``__float__``."

#: ../Doc/library/typing.rst:2466
msgid "An ABC with one abstract method ``__index__``."
msgstr "Una ABC con un método abstracto ``__index__``."

#: ../Doc/library/typing.rst:2472
msgid "An ABC with one abstract method ``__int__``."
msgstr "Una ABC con un método abstracto ``__int__``."

#: ../Doc/library/typing.rst:2476
msgid ""
"An ABC with one abstract method ``__round__`` that is covariant in its "
"return type."
msgstr ""
"Una ABC con un método abstracto ``__round__`` que es covariantes en su tipo "
"retornado."

#: ../Doc/library/typing.rst:2480
msgid "ABCs for working with IO"
msgstr "ABC para trabajar con IO"

#: ../Doc/library/typing.rst:2486
msgid ""
"Generic type ``IO[AnyStr]`` and its subclasses ``TextIO(IO[str])`` and "
"``BinaryIO(IO[bytes])`` represent the types of I/O streams such as returned "
"by :func:`open`."
msgstr ""
"El tipo genérico ``IO[AnyStr]`` y sus subclases ``TextIO(IO[str])`` y "
"``BinaryIO(IO[bytes])`` representan los tipos de flujos de E/S como los "
"retornados por :func:`open`."

#: ../Doc/library/typing.rst:2492
msgid "Functions and decorators"
msgstr "Funciones y decoradores"

#: ../Doc/library/typing.rst:2496
msgid "Cast a value to a type."
msgstr "Convertir un valor a un tipo."

#: ../Doc/library/typing.rst:2498
msgid ""
"This returns the value unchanged.  To the type checker this signals that the "
"return value has the designated type, but at runtime we intentionally don't "
"check anything (we want this to be as fast as possible)."
msgstr ""
"Esto retorna el valor sin modificar. Para el validador de tipos esto indica "
"que el valor de retorno tiene el tipo señalado pero, de manera intencionada, "
"no se comprobará en tiempo de ejecución (para maximizar la velocidad)."

#: ../Doc/library/typing.rst:2505
msgid ""
"Ask a static type checker to confirm that *val* has an inferred type of "
"*typ*."
msgstr ""
"Solicitar a un validador de tipos que confirme que *val* tiene *typ* por "
"tipo inferido."

#: ../Doc/library/typing.rst:2507
msgid ""
"At runtime this does nothing: it returns the first argument unchanged with "
"no checks or side effects, no matter the actual type of the argument."
msgstr ""
"En tiempo de ejecución esto no hace nada: devuelve el primer argumento sin "
"cambios, sin verificaciones ni efectos secundarios, sin importar el tipo "
"real del argumento."

#: ../Doc/library/typing.rst:2510
msgid ""
"When a static type checker encounters a call to ``assert_type()``, it emits "
"an error if the value is not of the specified type::"
msgstr ""
"Cuando un validador de tipo estático encuentra una llamada a "
"``assert_type()``, emite un error si el valor no es del tipo especificado::"

#: ../Doc/library/typing.rst:2517
msgid ""
"This function is useful for ensuring the type checker's understanding of a "
"script is in line with the developer's intentions::"
msgstr ""
"Esta función es útil para asegurarse de que la comprensión que el validador "
"de tipos tiene sobre un *script* está alineada con las intenciones de le "
"desarrolladores::"

#: ../Doc/library/typing.rst:2531
msgid ""
"Ask a static type checker to confirm that a line of code is unreachable."
msgstr ""
"Solicitar a un validador estático de tipos confirmar que una línea de código "
"no es alcanzable."

#: ../Doc/library/typing.rst:2533
msgid "Example::"
msgstr "Por ejemplo::"

#: ../Doc/library/typing.rst:2544
msgid ""
"Here, the annotations allow the type checker to infer that the last case can "
"never execute, because ``arg`` is either an :class:`int` or a :class:`str`, "
"and both options are covered by earlier cases."
msgstr ""
"Aquí, las anotaciones permiten al validador de tipos inferir que el último "
"caso nunca puede ejecutarse, porque ``arg`` es un :class:`int` o un :class:"
"`str`, y ambas opciones están cubiertas por los casos anteriores."

#: ../Doc/library/typing.rst:2549
msgid ""
"If a type checker finds that a call to ``assert_never()`` is reachable, it "
"will emit an error. For example, if the type annotation for ``arg`` was "
"instead ``int | str | float``, the type checker would emit an error pointing "
"out that ``unreachable`` is of type :class:`float`. For a call to "
"``assert_never`` to pass type checking, the inferred type of the argument "
"passed in must be the bottom type, :data:`Never`, and nothing else."
msgstr ""
"Si un validador de tipos encuentra que una llamada a ``assert_never()`` es "
"alcanzable, emitirá un error. Por ejemplo, si la anotación de tipo para "
"``arg`` fuese en cambio ``int | str | float``, el validador de tipos "
"emitiría un error que indicaría que ``unreachable`` es de tipo :class:"
"`float`. Para que una llamada a ``assert_never`` pase la verificación de "
"tipos, el tipo inferido del argumento pasado debe ser el tipo inferior, :"
"data:`Never`, y nada más."

#: ../Doc/library/typing.rst:2557
msgid "At runtime, this throws an exception when called."
msgstr "En tiempo de ejecución, ésto lanza una excepción cuando es llamado."

#: ../Doc/library/typing.rst:2560
msgid ""
"`Unreachable Code and Exhaustiveness Checking <https://typing.readthedocs.io/"
"en/latest/source/unreachable.html>`__ has more information about "
"exhaustiveness checking with static typing."
msgstr ""
"`Unreachable Code and Exhaustiveness Checking <https://typing.readthedocs.io/"
"en/latest/source/unreachable.html>`__ contiene más información acerca de la "
"verificación de exhaustividad con tipado estático."

#: ../Doc/library/typing.rst:2568
msgid "Reveal the inferred static type of an expression."
msgstr "Revela el tipo estático inferido de una expresión."

#: ../Doc/library/typing.rst:2570
msgid ""
"When a static type checker encounters a call to this function, it emits a "
"diagnostic with the type of the argument. For example::"
msgstr ""
"Cuando un validador estático de tipos se encuentra con una invocación a esta "
"función, emite un diagnostico con el tipo del argumento. Por ejemplo::"

#: ../Doc/library/typing.rst:2576
msgid ""
"This can be useful when you want to debug how your type checker handles a "
"particular piece of code."
msgstr ""
"Ésto puede ser de utilidad cuando se desea *debuguear* cómo tu validador de "
"tipos maneja una pieza particular de código."

#: ../Doc/library/typing.rst:2579
msgid ""
"The function returns its argument unchanged, which allows using it within an "
"expression::"
msgstr ""
"Esta función retorna su argumento sin cambios, lo que permite su uso dentro "
"de una expresión::"

#: ../Doc/library/typing.rst:2584
msgid ""
"Most type checkers support ``reveal_type()`` anywhere, even if the name is "
"not imported from ``typing``. Importing the name from ``typing`` allows your "
"code to run without runtime errors and communicates intent more clearly."
msgstr ""
"La mayoría de los validadores de tipos soportan ``reveal_type()`` en "
"cualquier lugar, incluso si el nombre no ha sido importado desde ``typing``. "
"Importar el nombre desde ``typing`` permite que el código corra sin errores "
"en tiempo de ejecución y comunica la intención de forma más clara."

#: ../Doc/library/typing.rst:2589
msgid ""
"At runtime, this function prints the runtime type of its argument to stderr "
"and returns it unchanged::"
msgstr ""
"En tiempo de ejecución, esta función imprime al *stderr* el tipo en tiempo "
"de ejecución de su argumento y lo retorna in cambios::"

#: ../Doc/library/typing.rst:2601
msgid ""
"Decorator to mark an object as providing :func:`dataclass <dataclasses."
"dataclass>`-like behavior."
msgstr ""
"Decorador para marcar un objeto como si proporcionara un comportamiento "
"similar a :func:`dataclass <dataclasses.dataclass>`."

#: ../Doc/library/typing.rst:2604
msgid ""
"``dataclass_transform`` may be used to decorate a class, metaclass, or a "
"function that is itself a decorator. The presence of "
"``@dataclass_transform()`` tells a static type checker that the decorated "
"object performs runtime \"magic\" that transforms a class in a similar way "
"to :func:`@dataclasses.dataclass <dataclasses.dataclass>`."
msgstr ""
"``dataclass_transform`` se puede utilizar para decorar una clase, metaclase "
"o una función que sea en sí misma un decorador. La presencia de "
"``@dataclass_transform()`` le indica al validador de tipos estáticos que el "
"objeto decorado realiza una \"magia\" en tiempo de ejecución que transforma "
"una clase de manera similar a :func:`@dataclasses.dataclass <dataclasses."
"dataclass>`."

#: ../Doc/library/typing.rst:2611
msgid "Example usage with a decorator function:"
msgstr "Ejemplo de uso con una función decoradora:"

#: ../Doc/library/typing.rst:2625
msgid "On a base class::"
msgstr "En una clase base::"

#: ../Doc/library/typing.rst:2634
msgid "On a metaclass::"
msgstr "En una metaclase::"

#: ../Doc/library/typing.rst:2645
msgid ""
"The ``CustomerModel`` classes defined above will be treated by type checkers "
"similarly to classes created with :func:`@dataclasses.dataclass <dataclasses."
"dataclass>`. For example, type checkers will assume these classes have "
"``__init__`` methods that accept ``id`` and ``name``."
msgstr ""
"Las clases ``CustomerModel`` definidas arribe serán tratadas por los "
"validadores de tipo de forma similar a las clases que sean creadas con  :"
"func:`@dataclasses.dataclass <dataclasses.dataclass>`. Por ejemplo, los "
"validadores de tipo asumirán que estas clases tienen métodos ``__init__`` "
"que aceptan ``id`` y ``name``."

#: ../Doc/library/typing.rst:2651
msgid ""
"The decorated class, metaclass, or function may accept the following bool "
"arguments which type checkers will assume have the same effect as they would "
"have on the :func:`@dataclasses.dataclass<dataclasses.dataclass>` decorator: "
"``init``, ``eq``, ``order``, ``unsafe_hash``, ``frozen``, ``match_args``, "
"``kw_only``, and ``slots``. It must be possible for the value of these "
"arguments (``True`` or ``False``) to be statically evaluated."
msgstr ""
"La clase, metaclase o función decorada puede aceptar los siguientes "
"argumentos booleanos, de los cuales los validadores de tipos asumirán que "
"tienen el mismo efecto que tendrían en el decorador :func:`@dataclasses."
"dataclass<dataclasses.dataclass>`: ``init``, ``eq``, ``order``, "
"``unsafe_hash``, ``frozen``, ``match_args``, ``kw_only``, y ``slots``. Debe "
"ser posible evaluar estáticamente el valor de estos argumentos (``True`` o "
"``False``)."

#: ../Doc/library/typing.rst:2659
msgid ""
"The arguments to the ``dataclass_transform`` decorator can be used to "
"customize the default behaviors of the decorated class, metaclass, or "
"function:"
msgstr ""
"Es posible utilizar los argumentos del decorador ``dataclass_transform`` "
"para personalizar los comportamientos por defecto de la clase, metaclase o "
"función decorada:"

#: ../Doc/library/typing.rst
msgid "Parameters"
msgstr "Parámetros"

#: ../Doc/library/typing.rst:2663
msgid ""
"Indicates whether the ``eq`` parameter is assumed to be ``True`` or "
"``False`` if it is omitted by the caller. Defaults to ``True``."
msgstr ""
"Indica si se asume que el parámetro ``eq`` es ``True`` o ``False`` si el "
"llamador lo omite. El valor predeterminado es ``True``."

#: ../Doc/library/typing.rst:2668
msgid ""
"Indicates whether the ``order`` parameter is assumed to be ``True`` or "
"``False`` if it is omitted by the caller. Defaults to ``False``."
msgstr ""
"Indica si se asume que el parámetro ``order`` es ``True`` o ``False`` si el "
"llamador lo omite. El valor predeterminado es ``False``."

#: ../Doc/library/typing.rst:2673
msgid ""
"Indicates whether the ``kw_only`` parameter is assumed to be ``True`` or "
"``False`` if it is omitted by the caller. Defaults to ``False``."
msgstr ""
"Indica si se asume que el parámetro ``kw_only`` es ``True`` o ``False`` si "
"el llamador lo omite. El valor predeterminado es ``False``."

#: ../Doc/library/typing.rst:2678
msgid ""
"Indicates whether the ``frozen`` parameter is assumed to be ``True`` or "
"``False`` if it is omitted by the caller. Defaults to ``False``.  .. "
"versionadded:: 3.12"
msgstr ""
"Indica si se asume que el parámetro ``frozen`` es ``True`` o ``False`` si el "
"llamador lo omite. El valor predeterminado es ``False``. .. Agregado en la "
"versión:: 3.12"

#: ../Doc/library/typing.rst:2679
msgid ""
"Indicates whether the ``frozen`` parameter is assumed to be ``True`` or "
"``False`` if it is omitted by the caller. Defaults to ``False``."
msgstr ""
"Indica si se asume que el parámetro ``frozen`` es ``True`` o ``False`` si el "
"llamador lo omite. El valor predeterminado es ``False``."

#: ../Doc/library/typing.rst:2685
msgid ""
"Specifies a static list of supported classes or functions that describe "
"fields, similar to :func:`dataclasses.field`. Defaults to ``()``."
msgstr ""
"Especifica una lista estática de clases o funciones admitidas que describen "
"campos, parecido  con :func:`dataclasses.field`. El valor predeterminado es "
"``()``."

#: ../Doc/library/typing.rst:2691
msgid ""
"Arbitrary other keyword arguments are accepted in order to allow for "
"possible future extensions."
msgstr ""
"Es posible pasar arbitrariamente otros argumentos nombrados para permitir "
"posibles extensiones futuras."

#: ../Doc/library/typing.rst:2695
msgid ""
"Type checkers recognize the following optional parameters on field "
"specifiers:"
msgstr ""
"Los validadores de tipos reconocen los siguientes parámetros opcionales en "
"los especificadores de campo:"

#: ../Doc/library/typing.rst:2698
msgid "**Recognised parameters for field specifiers**"
msgstr "**Parámetros reconocidos para especificadores de campo**"

#: ../Doc/library/typing.rst:2702
msgid "Parameter name"
msgstr "Nombre del parámetro"

#: ../Doc/library/typing.rst:2703
msgid "Description"
msgstr "Descripción"

#: ../Doc/library/typing.rst:2704
msgid "``init``"
msgstr "``init``"

#: ../Doc/library/typing.rst:2705
msgid ""
"Indicates whether the field should be included in the synthesized "
"``__init__`` method. If unspecified, ``init`` defaults to ``True``."
msgstr ""
"Indica si el campo debe incluirse en el método ``__init__`` sintetizado. Si "
"no se especifica, el valor predeterminado de ``init`` es ``True``."

#: ../Doc/library/typing.rst:2708
msgid "``default``"
msgstr "``default``"

#: ../Doc/library/typing.rst:2709
msgid "Provides the default value for the field."
msgstr "Proporciona el valor predeterminado para el campo."

#: ../Doc/library/typing.rst:2710
msgid "``default_factory``"
msgstr "``default_factory``"

#: ../Doc/library/typing.rst:2711
msgid ""
"Provides a runtime callback that returns the default value for the field. If "
"neither ``default`` nor ``default_factory`` are specified, the field is "
"assumed to have no default value and must be provided a value when the class "
"is instantiated."
msgstr ""
"Proporciona una retrollamada en tiempo de ejecución que devuelve el valor "
"predeterminado del campo. Si no se especifican ``default`` ni "
"``default_factory``, se supone que el campo no tiene un valor predeterminado "
"y se le debe proporcionar un valor cuando se cree una instancia de la clase."

#: ../Doc/library/typing.rst:2716
msgid "``factory``"
msgstr "``factory``"

#: ../Doc/library/typing.rst:2717
msgid "An alias for the ``default_factory`` parameter on field specifiers."
msgstr ""
"Un alias para el parámetro ``default_factory`` en los especificadores de "
"campo."

#: ../Doc/library/typing.rst:2718
msgid "``kw_only``"
msgstr "``kw_only``"

#: ../Doc/library/typing.rst:2719
msgid ""
"Indicates whether the field should be marked as keyword-only. If ``True``, "
"the field will be keyword-only. If ``False``, it will not be keyword-only. "
"If unspecified, the value of the ``kw_only`` parameter on the object "
"decorated with ``dataclass_transform`` will be used, or if that is "
"unspecified, the value of ``kw_only_default`` on ``dataclass_transform`` "
"will be used."
msgstr ""
"Indica si el campo debe marcarse como solo para palabras clave. Si es "
"``True``, el campo será solo para palabras clave. Si es ``False``, no será "
"solo para palabras clave. Si no se especifica, se utilizará el valor del "
"parámetro ``kw_only`` en el objeto decorado con ``dataclass_transform``, o "
"si no se especifica, se utilizará el valor de ``kw_only_default`` en "
"``dataclass_transform``."

#: ../Doc/library/typing.rst:2725
msgid "``alias``"
msgstr "``alias``"

# La idea de "synthesized __init__ method" puede verse en el pep 681 donde
# refiere a los métodos init que pueden auto-generar librerías con
# características similares a dataclass
#: ../Doc/library/typing.rst:2726
msgid ""
"Provides an alternative name for the field. This alternative name is used in "
"the synthesized ``__init__`` method."
msgstr ""
"Proporciona un nombre alternativo para el campo. Este nombre alternativo se "
"utiliza en el método sintetizado ``__init__``."

#: ../Doc/library/typing.rst:2729
msgid ""
"At runtime, this decorator records its arguments in the "
"``__dataclass_transform__`` attribute on the decorated object. It has no "
"other runtime effect."
msgstr ""
"En tiempo de ejecución, este decorador registra sus argumentos en el "
"atributo ``__dataclass_transform__`` del objeto decorado. No tiene otro "
"efecto en tiempo de ejecución."

#: ../Doc/library/typing.rst:2733
msgid "See :pep:`681` for more details."
msgstr "Véase :pep:`681` para más detalle."

#: ../Doc/library/typing.rst:2739
msgid "Decorator for creating overloaded functions and methods."
msgstr "Decorador para crear funciones y métodos sobrecargados."

#: ../Doc/library/typing.rst:2741
msgid ""
"The ``@overload`` decorator allows describing functions and methods that "
"support multiple different combinations of argument types. A series of "
"``@overload``-decorated definitions must be followed by exactly one non-"
"``@overload``-decorated definition (for the same function/method)."
msgstr ""
"El decorador ``@overload`` permite describir funciones y métodos que admiten "
"múltiples combinaciones diferentes de tipos de argumentos. Una serie de "
"definiciones decoradas con ``@overload`` debe ir seguida de exactamente una "
"definición que no esté decorada con ``@overload`` (para la misma función o "
"método)."

#: ../Doc/library/typing.rst:2746
msgid ""
"``@overload``-decorated definitions are for the benefit of the type checker "
"only, since they will be overwritten by the non-``@overload``-decorated "
"definition. The non-``@overload``-decorated definition, meanwhile, will be "
"used at runtime but should be ignored by a type checker.  At runtime, "
"calling an ``@overload``-decorated function directly will raise :exc:"
"`NotImplementedError`."
msgstr ""
"Las definiciones decoradas con ``@overload`` son solo para beneficio del "
"validador de tipos, ya que serán sobrescritas por la definición no decorada "
"con ``@overload``. Mientras tanto, la definición no decorada con "
"``@overload`` se usará en tiempo de ejecución, pero el validador de tipos "
"debe ignorarla. En tiempo de ejecución, llamar a una función decorada con "
"``@overload`` directamente generará :exc:`NotImplementedError`."

#: ../Doc/library/typing.rst:2754
msgid ""
"An example of overload that gives a more precise type than can be expressed "
"using a union or a type variable:"
msgstr ""
"Un ejemplo de sobrecarga que proporciona un tipo más preciso que el que se "
"puede expresar mediante una unión o una variable de tipo:"

#: ../Doc/library/typing.rst:2771
msgid ""
"See :pep:`484` for more details and comparison with other typing semantics."
msgstr ""
"Véase :pep:`484` para más detalle y comparación con otras semánticas de "
"tipado."

#: ../Doc/library/typing.rst:2773
msgid ""
"Overloaded functions can now be introspected at runtime using :func:"
"`get_overloads`."
msgstr ""
"Ahora es posible introspectar en tiempo de ejecución las funciones "
"sobrecargadas utilizando :func:`get_overloads`."

#: ../Doc/library/typing.rst:2780
msgid ""
"Return a sequence of :func:`@overload <overload>`-decorated definitions for "
"*func*."
msgstr ""
"Devuelve una secuencia de definiciones decoradas con :func:`@overload "
"<overload>` para *func*."

#: ../Doc/library/typing.rst:2783
msgid ""
"*func* is the function object for the implementation of the overloaded "
"function. For example, given the definition of ``process`` in the "
"documentation for :func:`@overload <overload>`, ``get_overloads(process)`` "
"will return a sequence of three function objects for the three defined "
"overloads. If called on a function with no overloads, ``get_overloads()`` "
"returns an empty sequence."
msgstr ""
"*func* es el objeto de función para la implementación de la función "
"sobrecargada. Por ejemplo, dada la definición de ``process`` en la "
"documentación de :func:`@overload <overload>`, ``get_overloads(process)`` "
"devolverá una secuencia de tres objetos de función para las tres sobrecargas "
"definidas. Si se llama en una función sin sobrecargas, ``get_overloads()`` "
"devuelve una secuencia vacía."

#: ../Doc/library/typing.rst:2790
msgid ""
"``get_overloads()`` can be used for introspecting an overloaded function at "
"runtime."
msgstr ""
"``get_overloads()`` puede ser utilizada para introspectar en tiempo de "
"ejecución una función sobrecargada."

#: ../Doc/library/typing.rst:2798
msgid "Clear all registered overloads in the internal registry."
msgstr "Borra todas las sobrecargas registradas en el registro interno."

#: ../Doc/library/typing.rst:2800
msgid "This can be used to reclaim the memory used by the registry."
msgstr ""
"Esto se puede utilizar para recuperar la memoria utilizada por el registro."

#: ../Doc/library/typing.rst:2807
msgid "Decorator to indicate final methods and final classes."
msgstr "Decorador para indicar métodos finales y clases finales."

#: ../Doc/library/typing.rst:2809
msgid ""
"Decorating a method with ``@final`` indicates to a type checker that the "
"method cannot be overridden in a subclass. Decorating a class with "
"``@final`` indicates that it cannot be subclassed."
msgstr ""
"Decorar un método con ``@final`` indica a un validador de tipos que el "
"método no se puede anular en una subclase. Decorar una clase con ``@final`` "
"indica que no se puede subclasificar."

#: ../Doc/library/typing.rst:2834
msgid ""
"The decorator will now attempt to set a ``__final__`` attribute to ``True`` "
"on the decorated object. Thus, a check like ``if getattr(obj, \"__final__\", "
"False)`` can be used at runtime to determine whether an object ``obj`` has "
"been marked as final. If the decorated object does not support setting "
"attributes, the decorator returns the object unchanged without raising an "
"exception."
msgstr ""
"El decorador intentará ahora establecer un atributo ``__final__`` como "
"``True`` en el objeto decorado. Por lo tanto, se puede utilizar una "
"comprobación como ``if getattr(obj, “__final__”, False)`` en tiempo de "
"ejecución para determinar si un objeto ``obj`` se ha marcado como final. Si "
"el objeto decorado no admite la configuración de atributos, el decorador "
"devuelve el objeto sin cambios sin lanzar una excepción."

# se extrae del contexto que el decorador elimina la comprobacion de tipo en
# el validador, por lo tanto solo anota/comenta (annotation), no
# indica/sugiere tipo (type hint)
#: ../Doc/library/typing.rst:2845
msgid "Decorator to indicate that annotations are not type hints."
msgstr ""
"Un decorador para indicar que las anotaciones no deben ser comprobadas como "
"indicadores de tipo."

#: ../Doc/library/typing.rst:2847
msgid ""
"This works as a class or function :term:`decorator`.  With a class, it "
"applies recursively to all methods and classes defined in that class (but "
"not to methods defined in its superclasses or subclasses). Type checkers "
"will ignore all annotations in a function or class with this decorator."
msgstr ""
"Esto funciona como un :term:`decorator` (decorador) de clase o función. Con "
"una clase, se aplica recursivamente a todos los métodos y clases definidos "
"en esa clase (pero no a los métodos definidos en sus superclases o "
"subclases). Los validadores de tipos ignorarán todas las anotaciones en una "
"función o clase con este decorador."

#: ../Doc/library/typing.rst:2853
msgid "``@no_type_check`` mutates the decorated object in place."
msgstr "``@no_type_check`` muta el objeto decorado en su lugar."

#: ../Doc/library/typing.rst:2857
msgid "Decorator to give another decorator the :func:`no_type_check` effect."
msgstr "Decorador para dar a otro decorador el efecto :func:`no_type_check`."

#: ../Doc/library/typing.rst:2859
msgid ""
"This wraps the decorator with something that wraps the decorated function "
"in :func:`no_type_check`."
msgstr ""
"Esto hace que el decorador decorado añada el efecto de :func:`no_type_check` "
"a la función decorada."

#: ../Doc/library/typing.rst:2865
msgid ""
"Decorator to indicate that a method in a subclass is intended to override a "
"method or attribute in a superclass."
msgstr ""
"Decorador para indicar que un método en una subclase está destinado a anular "
"un método o atributo en una superclase."

#: ../Doc/library/typing.rst:2868
msgid ""
"Type checkers should emit an error if a method decorated with ``@override`` "
"does not, in fact, override anything. This helps prevent bugs that may occur "
"when a base class is changed without an equivalent change to a child class."
msgstr ""
"Los validadores de tipos deberían emitir un error si un método decorado con "
"``@override`` no anula nada. Esto ayuda a evitar errores que pueden ocurrir "
"cuando se modifica una clase base sin un cambio equivalente en una clase "
"secundaria."

#: ../Doc/library/typing.rst:2890
msgid "There is no runtime checking of this property."
msgstr "No hay ninguna comprobación en tiempo de ejecución de esta propiedad."

#: ../Doc/library/typing.rst:2892
msgid ""
"The decorator will attempt to set an ``__override__`` attribute to ``True`` "
"on the decorated object. Thus, a check like ``if getattr(obj, "
"\"__override__\", False)`` can be used at runtime to determine whether an "
"object ``obj`` has been marked as an override.  If the decorated object does "
"not support setting attributes, the decorator returns the object unchanged "
"without raising an exception."
msgstr ""
"El decorador intentará establecer un atributo ``__override__`` en ``True`` "
"en el objeto decorado. Por lo tanto, una comprobación como ``if getattr(obj, "
"“__override__”, False)`` se puede utilizar en tiempo de ejecución para "
"determinar si un objeto ``obj`` ha sido marcado como anulado. Si el objeto "
"decorado no admite la configuración de atributos, el decorador devuelve el "
"objeto sin cambios sin generar una excepción."

#: ../Doc/library/typing.rst:2899
msgid "See :pep:`698` for more details."
msgstr "Vea :pep:`681` para más información."

#: ../Doc/library/typing.rst:2906
msgid "Decorator to mark a class or function as unavailable at runtime."
msgstr ""
"Decorador para marcar una clase o función como no disponible en tiempo de "
"ejecución."

#: ../Doc/library/typing.rst:2908
msgid ""
"This decorator is itself not available at runtime. It is mainly intended to "
"mark classes that are defined in type stub files if an implementation "
"returns an instance of a private class::"
msgstr ""
"Este decorador no está disponible en tiempo de ejecución. Existe "
"principalmente para marcar clases que se definen en archivos *stub* para "
"cuando una implementación retorna una instancia de una clase privada::"

#: ../Doc/library/typing.rst:2919
msgid ""
"Note that returning instances of private classes is not recommended. It is "
"usually preferable to make such classes public."
msgstr ""
"Nótese que no se recomienda retornar instancias de clases privadas. "
"Normalmente es preferible convertirlas en clases públicas."

#: ../Doc/library/typing.rst:2923
msgid "Introspection helpers"
msgstr "Ayudas de introspección"

#: ../Doc/library/typing.rst:2927
msgid ""
"Return a dictionary containing type hints for a function, method, module or "
"class object."
msgstr ""
"Retorna un diccionario que contiene indicaciones de tipo para una función, "
"método, módulo o objeto clase."

#: ../Doc/library/typing.rst:2930
msgid ""
"This is often the same as ``obj.__annotations__``. In addition, forward "
"references encoded as string literals are handled by evaluating them in "
"``globals`` and ``locals`` namespaces. For a class ``C``, return a "
"dictionary constructed by merging all the ``__annotations__`` along ``C."
"__mro__`` in reverse order."
msgstr ""
"Habitualmente, esto es lo mismo que ``obj.__annotations__``. Además, las "
"referencias hacia adelante codificadas como literales de texto se manejan "
"evaluándolas en los espacios de nombres ``globals`` y ``locals``. Para una "
"clase ``C``, se retorna un diccionario construido por la combinación de "
"``__annotations__`` y ``C.__mro`` en orden inverso."

#: ../Doc/library/typing.rst:2936
msgid ""
"The function recursively replaces all ``Annotated[T, ...]`` with ``T``, "
"unless ``include_extras`` is set to ``True`` (see :class:`Annotated` for "
"more information). For example:"
msgstr ""
"La función reemplaza recursivamente todos los ``Annotated[T, ...]`` con "
"``T``, a menos que ``include_extras`` esté configurado como ``True`` "
"(consulte :class:`Annotated` para obtener más información). Por ejemplo:"

#: ../Doc/library/typing.rst:2953
msgid ""
":func:`get_type_hints` does not work with imported :ref:`type aliases <type-"
"aliases>` that include forward references. Enabling postponed evaluation of "
"annotations (:pep:`563`) may remove the need for most forward references."
msgstr ""
":func:`get_type_hints` no funciona con :ref:`alias de tipo <type-aliases>` "
"importados que incluyen referencias hacia adelante. Habilitar la evaluación "
"pospuesta de anotaciones (:pep:`563`) puede eliminar la necesidad de la "
"mayoría de las referencias futuras."

#: ../Doc/library/typing.rst:2958
msgid ""
"Added ``include_extras`` parameter as part of :pep:`593`. See the "
"documentation on :data:`Annotated` for more information."
msgstr ""
"Se agregó el parámetro ``include_extras`` como parte de :pep:`593`. Consulte "
"la documentación en :data:`Annotated` para obtener más información."

#: ../Doc/library/typing.rst:2962
msgid ""
"Previously, ``Optional[t]`` was added for function and method annotations if "
"a default value equal to ``None`` was set. Now the annotation is returned "
"unchanged."
msgstr ""
"Anteriormente, se agregaba ``Optional[t]`` en las anotaciones de funciones o "
"métodos si se establecía un valor por defecto igual a ``None``. Ahora la "
"anotación es retornada sin cambios."

#: ../Doc/library/typing.rst:2969
msgid ""
"Get the unsubscripted version of a type: for a typing object of the form "
"``X[Y, Z, ...]`` return ``X``."
msgstr ""
"Obtiene la versión sin suscripción de un tipo: para un objeto de tipado de "
"la forma ``X[Y, Z, ...]`` devuelve ``X``."

#: ../Doc/library/typing.rst:2972
msgid ""
"If ``X`` is a typing-module alias for a builtin or :mod:`collections` class, "
"it will be normalized to the original class. If ``X`` is an instance of :"
"class:`ParamSpecArgs` or :class:`ParamSpecKwargs`, return the underlying :"
"class:`ParamSpec`. Return ``None`` for unsupported objects."
msgstr ""
"Si ``X`` es un alias de módulo de tipado para una clase incorporada o :mod:"
"`collections`, se normalizará a la clase original. Si ``X`` es una instancia "
"de :class:`ParamSpecArgs` o :class:`ParamSpecKwargs`, devuelve la :class:"
"`ParamSpec` subyacente. Devuelve ``None`` para objetos no soportados."

#: ../Doc/library/typing.rst:2978 ../Doc/library/typing.rst:3001
msgid "Examples:"
msgstr "Por ejemplo:"

#: ../Doc/library/typing.rst:2993
msgid ""
"Get type arguments with all substitutions performed: for a typing object of "
"the form ``X[Y, Z, ...]`` return ``(Y, Z, ...)``."
msgstr ""
"Obtiene los argumentos de tipo con todas las sustituciones realizadas: para "
"un objeto de tipo con la forma ``X[Y, Z, ...]`` devuelve ``(Y, Z, ...)``."

#: ../Doc/library/typing.rst:2996
msgid ""
"If ``X`` is a union or :class:`Literal` contained in another generic type, "
"the order of ``(Y, Z, ...)`` may be different from the order of the original "
"arguments ``[Y, Z, ...]`` due to type caching. Return ``()`` for unsupported "
"objects."
msgstr ""
"Si ``X`` es una unión o :class:`Literal` contenida en otro tipo genérico, el "
"orden de ``(Y, Z, ...)`` puede ser diferente del orden de los argumentos "
"originales ``[Y, Z, ...]`` debido al almacenamiento en caché de tipos. "
"Devuelve ``()`` para objetos no soportados."

#: ../Doc/library/typing.rst:3013
msgid "Check if a type is a :class:`TypedDict`."
msgstr "Compruebe si un tipo es :class:`TypedDict`."

#: ../Doc/library/typing.rst:3034
msgid ""
"Class used for internal typing representation of string forward references."
msgstr ""
"Clase utilizada para la representación interna de tipado de cadenas de "
"caracteres en referencias futuras."

#: ../Doc/library/typing.rst:3036
msgid ""
"For example, ``List[\"SomeClass\"]`` is implicitly transformed into "
"``List[ForwardRef(\"SomeClass\")]``.  ``ForwardRef`` should not be "
"instantiated by a user, but may be used by introspection tools."
msgstr ""
"Por ejemplo, ``List[\"SomeClass\"]`` se transforma implícitamente en "
"``List[ForwardRef(\"SomeClass\")]``. ``ForwardRef`` no debe ser instanciado "
"por un usuario, pero puede ser utilizado por herramientas de introspección."

#: ../Doc/library/typing.rst:3041
msgid ""
":pep:`585` generic types such as ``list[\"SomeClass\"]`` will not be "
"implicitly transformed into ``list[ForwardRef(\"SomeClass\")]`` and thus "
"will not automatically resolve to ``list[SomeClass]``."
msgstr ""
"Los tipos genéricos de :pep:`585`, como ``list[\"SomeClass\"]``, no se "
"transformarán implícitamente en ``list[ForwardRef(\"SomeClass\")]`` y, por "
"lo tanto, no se resolverán automáticamente en ``list[SomeClass]``."

#: ../Doc/library/typing.rst:3048
msgid "Constant"
msgstr "Constantes"

#: ../Doc/library/typing.rst:3052
msgid ""
"A special constant that is assumed to be ``True`` by 3rd party static type "
"checkers. It is ``False`` at runtime."
msgstr ""
"Una constante especial que los validadores de tipos estáticos de terceros "
"asumen como ``True``. Es ``False`` en tiempo de ejecución."

#: ../Doc/library/typing.rst:3063
msgid ""
"The first type annotation must be enclosed in quotes, making it a \"forward "
"reference\", to hide the ``expensive_mod`` reference from the interpreter "
"runtime.  Type annotations for local variables are not evaluated, so the "
"second annotation does not need to be enclosed in quotes."
msgstr ""
"Nótese que la primera anotación de tipo debe estar rodeada por comillas, "
"convirtiéndola en una \"referencia directa\", para ocultar al intérprete la "
"referencia ``expensive_mod`` en tiempo de ejecución. Las anotaciones de tipo "
"para variables locales no se evalúan, así que la segunda anotación no "
"necesita comillas."

#: ../Doc/library/typing.rst:3070
msgid ""
"If ``from __future__ import annotations`` is used, annotations are not "
"evaluated at function definition time. Instead, they are stored as strings "
"in ``__annotations__``. This makes it unnecessary to use quotes around the "
"annotation (see :pep:`563`)."
msgstr ""
"Si se utiliza ``from __future__ import annotations``, las anotaciones no son "
"evaluadas al momento de la definición de funciones. En cambio, serán "
"almacenadas como cadenas de texto en ``__annotations__``. Ésto vuelve "
"innecesario el uso de comillas alrededor de la anotación (véase :pep:`563`)."

#: ../Doc/library/typing.rst:3082
msgid "Deprecated aliases"
msgstr "Alias obsoletos"

#: ../Doc/library/typing.rst:3084
msgid ""
"This module defines several deprecated aliases to pre-existing standard "
"library classes. These were originally included in the typing module in "
"order to support parameterizing these generic classes using ``[]``. However, "
"the aliases became redundant in Python 3.9 when the corresponding pre-"
"existing classes were enhanced to support ``[]`` (see :pep:`585`)."
msgstr ""
"Este módulo define varios alias obsoletos para clases de biblioteca estándar "
"preexistentes. Originalmente, se incluyeron en el módulo de tipado para "
"admitir la parametrización de estas clases genéricas mediante ``[]``. Sin "
"embargo, los alias se volvieron redundantes en Python 3.9 cuando las clases "
"preexistentes correspondientes se mejoraron para admitir ``[]`` (vea :pep:"
"`585`)."

#: ../Doc/library/typing.rst:3091
msgid ""
"The redundant types are deprecated as of Python 3.9. However, while the "
"aliases may be removed at some point, removal of these aliases is not "
"currently planned. As such, no deprecation warnings are currently issued by "
"the interpreter for these aliases."
msgstr ""
"Los tipos redundantes están obsoletos a partir de Python 3.9. Sin embargo, "
"si bien los alias pueden eliminarse en algún momento, actualmente no se "
"planea eliminarlos. Por lo tanto, el intérprete no emite advertencias de "
"obsolescencia para estos alias."

#: ../Doc/library/typing.rst:3096
msgid ""
"If at some point it is decided to remove these deprecated aliases, a "
"deprecation warning will be issued by the interpreter for at least two "
"releases prior to removal. The aliases are guaranteed to remain in the "
"typing module without deprecation warnings until at least Python 3.14."
msgstr ""
"Si en algún momento se decide eliminar estos alias obsoletos, el intérprete "
"emitirá una advertencia de desuso durante al menos dos versiones antes de la "
"eliminación. Se garantiza que los alias permanecerán en el módulo de "
"tipificación sin advertencias de desuso hasta al menos Python 3.14."

#: ../Doc/library/typing.rst:3101
msgid ""
"Type checkers are encouraged to flag uses of the deprecated types if the "
"program they are checking targets a minimum Python version of 3.9 or newer."
msgstr ""
"Se recomienda a los validadores de tipos que marquen los usos de los tipos "
"obsoletos si el programa que están verificando apunta a una versión mínima "
"de Python 3.9 o más reciente."

#: ../Doc/library/typing.rst:3107
msgid "Aliases to built-in types"
msgstr "Alias de tipos integrados"

#: ../Doc/library/typing.rst:3111
msgid "Deprecated alias to :class:`dict`."
msgstr "Alias obsoleto de :class:`dict`."

#: ../Doc/library/typing.rst:3113
msgid ""
"Note that to annotate arguments, it is preferred to use an abstract "
"collection type such as :class:`Mapping` rather than to use :class:`dict` "
"or :class:`!typing.Dict`."
msgstr ""
"Tenga en cuenta que para anotar argumentos, es preferible utilizar un tipo "
"de colección abstracto como :class:`Mapping` en lugar de utilizar :class:"
"`dict` o :class:`!typing.Dict`."

#: ../Doc/library/typing.rst:3117 ../Doc/library/typing.rst:3359
msgid "This type can be used as follows::"
msgstr "Este tipo se puede usar de la siguiente manera::"

#: ../Doc/library/typing.rst:3122
msgid ""
":class:`builtins.dict <dict>` now supports subscripting (``[]``). See :pep:"
"`585` and :ref:`types-genericalias`."
msgstr ""
":class:`builtins.dict <dict>` ahora soporta subíndices (``[]``). Véase :pep:"
"`585` y :ref:`types-genericalias`."

#: ../Doc/library/typing.rst:3128
msgid "Deprecated alias to :class:`list`."
msgstr "Alias obsoleto de :class:`list`."

#: ../Doc/library/typing.rst:3130
msgid ""
"Note that to annotate arguments, it is preferred to use an abstract "
"collection type such as :class:`Sequence` or :class:`Iterable` rather than "
"to use :class:`list` or :class:`!typing.List`."
msgstr ""
"Tenga en cuenta que para anotar argumentos, es preferible utilizar un tipo "
"de colección abstracto como :class:`Sequence` o :class:`Iterable` en lugar "
"de utilizar :class:`list` o :class:`!typing.List`."

#: ../Doc/library/typing.rst:3134
msgid "This type may be used as follows::"
msgstr "Este tipo se puede usar del siguiente modo::"

#: ../Doc/library/typing.rst:3142
msgid ""
":class:`builtins.list <list>` now supports subscripting (``[]``). See :pep:"
"`585` and :ref:`types-genericalias`."
msgstr ""
":class:`builtins.list <list>` ahora soporta subíndices (``[]``). Véase :pep:"
"`585` y :ref:`types-genericalias`."

#: ../Doc/library/typing.rst:3148
msgid "Deprecated alias to :class:`builtins.set <set>`."
msgstr "Alias obsoleto de :class:`builtins.set <set>`."

#: ../Doc/library/typing.rst:3150
msgid ""
"Note that to annotate arguments, it is preferred to use an abstract "
"collection type such as :class:`AbstractSet` rather than to use :class:`set` "
"or :class:`!typing.Set`."
msgstr ""
"Tenga en cuenta que para anotar argumentos, es preferible utilizar un tipo "
"de colección abstracto como :class:`AbstractSet` en lugar de utilizar :class:"
"`set` o :class:`!typing.Set`."

#: ../Doc/library/typing.rst:3154
msgid ""
":class:`builtins.set <set>` now supports subscripting (``[]``). See :pep:"
"`585` and :ref:`types-genericalias`."
msgstr ""
":class:`builtins.set <set>` ahora soporta subíndices (``[]``). Véase :pep:"
"`585` y :ref:`types-genericalias`."

#: ../Doc/library/typing.rst:3160
msgid "Deprecated alias to :class:`builtins.frozenset <frozenset>`."
msgstr "Alias obsoleto de :class:`builtins.frozenset <frozenset>`."

#: ../Doc/library/typing.rst:3162
msgid ""
":class:`builtins.frozenset <frozenset>` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`builtins.frozenset <frozenset>` ahora soporta subíndices (``[]``). "
"Véase :pep:`585` y :ref:`types-genericalias`."

#: ../Doc/library/typing.rst:3169
msgid "Deprecated alias for :class:`tuple`."
msgstr "Alias obsoleto de :class:`tuple`."

#: ../Doc/library/typing.rst:3171
msgid ""
":class:`tuple` and ``Tuple`` are special-cased in the type system; see :ref:"
"`annotating-tuples` for more details."
msgstr ""
":class:`tuple` y ``Tuple`` son casos especiales en el sistema de tipos; "
"consulte :ref:`annotating-tuples` para más detalles."

#: ../Doc/library/typing.rst:3174
msgid ""
":class:`builtins.tuple <tuple>` now supports subscripting (``[]``). See :pep:"
"`585` and :ref:`types-genericalias`."
msgstr ""
":class:`builtins.tuple <tuple>` ahora soporta el uso de subíndices (``[]``). "
"Véase :pep:`585` y :ref:`types-genericalias`."

#: ../Doc/library/typing.rst:3180
msgid "Deprecated alias to :class:`type`."
msgstr "Alias obsoleto de :class:`type`."

#: ../Doc/library/typing.rst:3182
msgid ""
"See :ref:`type-of-class-objects` for details on using :class:`type` or "
"``typing.Type`` in type annotations."
msgstr ""
"Vea :ref:`type-of-class-objects` para obtener detalles sobre el uso de :"
"class:`type` o ``typing.Type`` en anotaciones de tipo."

#: ../Doc/library/typing.rst:3187
msgid ""
":class:`builtins.type <type>` now supports subscripting (``[]``). See :pep:"
"`585` and :ref:`types-genericalias`."
msgstr ""
":class:`builtins.type <type>` ahora soporta el uso de subíndices (``[]``). "
"Véase :pep:`585` y :ref:`types-genericalias`."

#: ../Doc/library/typing.rst:3194
msgid "Aliases to types in :mod:`collections`"
msgstr "Alias de tipos en :mod:`collections`"

#: ../Doc/library/typing.rst:3198
msgid "Deprecated alias to :class:`collections.defaultdict`."
msgstr "Alias obsoleto de :class:`collections.defaultdict`."

#: ../Doc/library/typing.rst:3202
msgid ""
":class:`collections.defaultdict` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.defaultdict` ahora soporta subíndices (``[]``). Véase :"
"pep:`585` y :ref:`types-genericalias`."

#: ../Doc/library/typing.rst:3208
msgid "Deprecated alias to :class:`collections.OrderedDict`."
msgstr "Alias obsoleto de :class:`collections.OrderedDict`."

#: ../Doc/library/typing.rst:3212
msgid ""
":class:`collections.OrderedDict` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.OrderedDict` ahora soporta subíndices (``[]``). Véase :"
"pep:`585` y :ref:`types-genericalias`."

#: ../Doc/library/typing.rst:3218
msgid "Deprecated alias to :class:`collections.ChainMap`."
msgstr "Alias obsoleto de :class:`collections.ChainMap`."

#: ../Doc/library/typing.rst:3223
msgid ""
":class:`collections.ChainMap` now supports subscripting (``[]``). See :pep:"
"`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.ChainMap` ahora soporta subíndices (``[]``). Véase :pep:"
"`585` y :ref:`types-genericalias`."

#: ../Doc/library/typing.rst:3229
msgid "Deprecated alias to :class:`collections.Counter`."
msgstr "Alias obsoleto de :class:`collections.Counter`."

#: ../Doc/library/typing.rst:3234
msgid ""
":class:`collections.Counter` now supports subscripting (``[]``). See :pep:"
"`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.Counter` ahora soporta subíndices (``[]``)`. Véase :pep:"
"`585` y :ref:`types-genericalias`."

#: ../Doc/library/typing.rst:3240
msgid "Deprecated alias to :class:`collections.deque`."
msgstr "Alias obsoleto de :class:`collections.deque`."

#: ../Doc/library/typing.rst:3245
msgid ""
":class:`collections.deque` now supports subscripting (``[]``). See :pep:"
"`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.deque` ahora soporta subíndices (``[]``). Véase :pep:"
"`585` y :ref:`types-genericalias`."

#: ../Doc/library/typing.rst:3252
msgid "Aliases to other concrete types"
msgstr "Alias ​​a otros tipos concretos"

#: ../Doc/library/typing.rst:3257
msgid ""
"The ``typing.io`` namespace is deprecated and will be removed. These types "
"should be directly imported from ``typing`` instead."
msgstr ""
"El espacio de nombres ``typing.io`` está obsoleto y se eliminará. En su "
"lugar, estos tipos deben importarse directamente desde ``typing``."

#: ../Doc/library/typing.rst:3261
msgid ""
"Deprecated aliases corresponding to the return types from :func:`re.compile` "
"and :func:`re.match`."
msgstr ""
"Alias ​​obsoletos correspondientes a los tipos de retorno :func:`re.compile` "
"y :func:`re.match`."

#: ../Doc/library/typing.rst:3264
msgid ""
"These types (and the corresponding functions) are generic over :data:"
"`AnyStr`. ``Pattern`` can be specialised as ``Pattern[str]`` or "
"``Pattern[bytes]``; ``Match`` can be specialised as ``Match[str]`` or "
"``Match[bytes]``."
msgstr ""
"Estos tipos (y las funciones correspondientes) son genéricos sobre :data:"
"`AnyStr`. ``Pattern`` se puede especializar como ``Pattern[str]`` o "
"``Pattern[bytes]``; ``Match`` se puede especializar como ``Match[str]`` o "
"``Match[bytes]``."

#: ../Doc/library/typing.rst:3272
msgid ""
"The ``typing.re`` namespace is deprecated and will be removed. These types "
"should be directly imported from ``typing`` instead."
msgstr ""
"El espacio de nombres ``typing.re`` está obsoleto y se eliminará. En su "
"lugar, estos tipos deben importarse directamente desde ``typing``."

#: ../Doc/library/typing.rst:3273
msgid ""
"Classes ``Pattern`` and ``Match`` from :mod:`re` now support ``[]``. See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
"Las clases ``Pattern`` y ``Match`` de :mod:`re` ahora soportan ``[]``. "
"Véase :pep:`585` y :ref:`types-genericalias`."

#: ../Doc/library/typing.rst:3279
msgid "Deprecated alias for :class:`str`."
msgstr "Alias obsoleto para :class:`str`."

#: ../Doc/library/typing.rst:3281
msgid ""
"``Text`` is provided to supply a forward compatible path for Python 2 code: "
"in Python 2, ``Text`` is an alias for ``unicode``."
msgstr ""
"Se indica ``Text`` para proporcionar compatibilidad con versiones de código "
"posteriores a Python 2: en Python 2, ``Text`` es un alias para ``unicode``."

#: ../Doc/library/typing.rst:3285
msgid ""
"Use ``Text`` to indicate that a value must contain a unicode string in a "
"manner that is compatible with both Python 2 and Python 3::"
msgstr ""
"Úsese ``Text`` para indicar que un valor debe contener una cadena de texto "
"Unicode de manera que sea compatible con Python 2 y Python 3::"

#: ../Doc/library/typing.rst:3293
msgid ""
"Python 2 is no longer supported, and most type checkers also no longer "
"support type checking Python 2 code. Removal of the alias is not currently "
"planned, but users are encouraged to use :class:`str` instead of ``Text``."
msgstr ""
"Python 2 ya no es compatible, y la mayoría de los validadores de tipos "
"tampoco admiten la verificación de tipos de código Python 2. La eliminación "
"del alias no está planeada actualmente, pero se recomienda a los usuarios "
"utilizar :class:`str` en lugar de ``Text``."

#: ../Doc/library/typing.rst:3303
msgid "Aliases to container ABCs in :mod:`collections.abc`"
msgstr "Alias de ABCs de contenedores en :mod:`collections.abc`"

#: ../Doc/library/typing.rst:3307
msgid "Deprecated alias to :class:`collections.abc.Set`."
msgstr "Alias obsoleto de :class:`collections.abc.Set`."

#: ../Doc/library/typing.rst:3309
msgid ""
":class:`collections.abc.Set` now supports subscripting (``[]``). See :pep:"
"`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Set` ahora soporta subíndices (``[]``). Véase :pep:"
"`585` y :ref:`types-genericalias`."

#: ../Doc/library/typing.rst:3315
msgid ""
"This type represents the types :class:`bytes`, :class:`bytearray`, and :"
"class:`memoryview` of byte sequences."
msgstr ""
"Este tipo representa a los tipos :class:`bytes`, :class:`bytearray`, y :"
"class:`memoryview` de secuencias de bytes."

#: ../Doc/library/typing.rst:3319
msgid ""
"Prefer :class:`collections.abc.Buffer`, or a union like ``bytes | bytearray "
"| memoryview``."
msgstr ""
"Preferiblemente use :class:`collections.abc.Buffer`, o una unión como "
"``bytes | bytearray | memoryview``."

#: ../Doc/library/typing.rst:3323
msgid "Deprecated alias to :class:`collections.abc.Collection`."
msgstr "Alias obsoleto de :class:`collections.abc.Collection`."

#: ../Doc/library/typing.rst:3327
msgid ""
":class:`collections.abc.Collection` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Collection` ahora soporta la sintaxis de subíndice "
"(``[]``). Véase :pep:`585` y :ref:`types-genericalias`."

#: ../Doc/library/typing.rst:3333
msgid "Deprecated alias to :class:`collections.abc.Container`."
msgstr "Alias obsoleto de :class:`collections.abc.Container`."

#: ../Doc/library/typing.rst:3335
msgid ""
":class:`collections.abc.Container` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Container` ahora soporta subíndices (``[]``). Véase :"
"pep:`585` y :ref:`types-genericalias`."

#: ../Doc/library/typing.rst:3341
msgid "Deprecated alias to :class:`collections.abc.ItemsView`."
msgstr "Alias obsoleto de :class:`collections.abc.ItemsView`."

#: ../Doc/library/typing.rst:3343
msgid ""
":class:`collections.abc.ItemsView` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.ItemsView` ahora soporta subíndices (``[]``). Véase :"
"pep:`585` y :ref:`types-genericalias`."

#: ../Doc/library/typing.rst:3349
msgid "Deprecated alias to :class:`collections.abc.KeysView`."
msgstr "Alias obsoleto de :class:`collections.abc.KeysView`."

#: ../Doc/library/typing.rst:3351
msgid ""
":class:`collections.abc.KeysView` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.KeysView` ahora soporta subíndices (``[]``). Véase :"
"pep:`585` y :ref:`types-genericalias`."

#: ../Doc/library/typing.rst:3357
msgid "Deprecated alias to :class:`collections.abc.Mapping`."
msgstr "Alias obsoleto de :class:`collections.abc.Mapping`."

#: ../Doc/library/typing.rst:3364
msgid ""
":class:`collections.abc.Mapping` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Mapping` ahora soporta subíndices (``[]``). Véase :"
"pep:`585` y :ref:`types-genericalias`."

#: ../Doc/library/typing.rst:3370
msgid "Deprecated alias to :class:`collections.abc.MappingView`."
msgstr "Alias obsoleto de :class:`collections.abc.MappingView`."

#: ../Doc/library/typing.rst:3372
msgid ""
":class:`collections.abc.MappingView` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.MappingView` ahora soporta subíndices (``[]``). "
"Véase :pep:`585` y :ref:`types-genericalias`."

#: ../Doc/library/typing.rst:3378
msgid "Deprecated alias to :class:`collections.abc.MutableMapping`."
msgstr "Alias obsoleto de :class:`collections.abc.MutableMapping`."

#: ../Doc/library/typing.rst:3380
msgid ""
":class:`collections.abc.MutableMapping` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.MutableMapping` ahora soporta subíndices (``[]``). "
"Véase :pep:`585` y :ref:`types-genericalias`."

#: ../Doc/library/typing.rst:3387
msgid "Deprecated alias to :class:`collections.abc.MutableSequence`."
msgstr "Alias obsoleto de :class:`collections.abc.MutableSequence`."

#: ../Doc/library/typing.rst:3389
msgid ""
":class:`collections.abc.MutableSequence` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.MutableSequence` ahora soporta subíndices (``[]``). "
"Véase :pep:`585` y :ref:`types-genericalias`."

#: ../Doc/library/typing.rst:3396
msgid "Deprecated alias to :class:`collections.abc.MutableSet`."
msgstr "Alias obsoleto de :class:`collections.abc.MutableSet`."

#: ../Doc/library/typing.rst:3398
msgid ""
":class:`collections.abc.MutableSet` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.MutableSet` ahora soporta subíndices (``[]``). "
"Véase :pep:`585` y :ref:`types-genericalias`."

#: ../Doc/library/typing.rst:3404
msgid "Deprecated alias to :class:`collections.abc.Sequence`."
msgstr "Alias obsoleto de :class:`collections.abc.Sequence`."

#: ../Doc/library/typing.rst:3406
msgid ""
":class:`collections.abc.Sequence` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Sequence` ahora soporta subíndices (``[]``). Véase :"
"pep:`585` y :ref:`types-genericalias`."

#: ../Doc/library/typing.rst:3412
msgid "Deprecated alias to :class:`collections.abc.ValuesView`."
msgstr "Alias obsoleto de :class:`collections.abc.ValuesView`."

#: ../Doc/library/typing.rst:3414
msgid ""
":class:`collections.abc.ValuesView` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.ValuesView` ahora soporta subíndices (``[]``). "
"Véase :pep:`585` y :ref:`types-genericalias`."

#: ../Doc/library/typing.rst:3421
msgid "Aliases to asynchronous ABCs in :mod:`collections.abc`"
msgstr "Alias para ABCs asíncronos en :mod:`collections.abc`"

#: ../Doc/library/typing.rst:3425
msgid "Deprecated alias to :class:`collections.abc.Coroutine`."
msgstr "Alias obsoleto de :class:`collections.abc.Coroutine`."

#: ../Doc/library/typing.rst:3427
msgid ""
"The variance and order of type variables correspond to those of :class:"
"`Generator`, for example::"
msgstr ""
"La variación y el orden de las variables de tipo corresponden a las de :"
"class:`Generator`, por ejemplo::"

#: ../Doc/library/typing.rst:3438
msgid ""
":class:`collections.abc.Coroutine` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Coroutine` ahora soporta subíndices (``[]``). Véase :"
"pep:`585` y :ref:`types-genericalias`."

#: ../Doc/library/typing.rst:3444
msgid "Deprecated alias to :class:`collections.abc.AsyncGenerator`."
msgstr "Alias obsoleto de :class:`collections.abc.AsyncGenerator`."

#: ../Doc/library/typing.rst:3446
msgid ""
"An async generator can be annotated by the generic type "
"``AsyncGenerator[YieldType, SendType]``. For example::"
msgstr ""
"Un generador asíncrono se puede anotar con el tipo genérico "
"``AsyncGenerator[YieldType, SendType]``. Por ejemplo::"

#: ../Doc/library/typing.rst:3455
msgid ""
"Unlike normal generators, async generators cannot return a value, so there "
"is no ``ReturnType`` type parameter. As with :class:`Generator`, the "
"``SendType`` behaves contravariantly."
msgstr ""
"A diferencia de los generadores normales, los generadores asíncronos no "
"pueden retornar un valor, por lo que no hay un parámetro de tipo "
"``ReturnType``. Igual que :class:`Generator`, ``SendType`` se comporta como "
"contravariante."

#: ../Doc/library/typing.rst:3459
msgid ""
"If your generator will only yield values, set the ``SendType`` to ``None``::"
msgstr ""
"Si tu generador solo retornará valores con *yield*,  establece el "
"``SendType`` como ``None``::"

#: ../Doc/library/typing.rst:3467
msgid ""
"Alternatively, annotate your generator as having a return type of either "
"``AsyncIterable[YieldType]`` or ``AsyncIterator[YieldType]``::"
msgstr ""
"Opcionalmente, anota el generador con un tipo de retorno "
"``AsyncIterable[YieldType]`` o ``AsyncIterator[YieldType]``::"

#: ../Doc/library/typing.rst:3477
msgid ""
":class:`collections.abc.AsyncGenerator` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.AsycGenerator` ahora soporta subíndices (``[]``). "
"Véase :pep:`585` y :ref:`types-genericalias`."

#: ../Doc/library/typing.rst:3484
msgid "Deprecated alias to :class:`collections.abc.AsyncIterable`."
msgstr "Alias obsoleto de :class:`collections.abc.AsyncIterable`."

#: ../Doc/library/typing.rst:3488
msgid ""
":class:`collections.abc.AsyncIterable` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.AsyncIterable` ahora soporta subíndices (``[]``). "
"Véase :pep:`585` y :ref:`types-genericalias`."

#: ../Doc/library/typing.rst:3494
msgid "Deprecated alias to :class:`collections.abc.AsyncIterator`."
msgstr "Alias obsoleto de :class:`collections.abc.AsyncIterator`."

#: ../Doc/library/typing.rst:3498
msgid ""
":class:`collections.abc.AsyncIterator` now supports subscripting (``[]``). "
"See :pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.AsyncIterator` ahora soporta subíndices (``[]``). "
"Véase :pep:`585` y :ref:`types-genericalias`."

#: ../Doc/library/typing.rst:3504
msgid "Deprecated alias to :class:`collections.abc.Awaitable`."
msgstr "Alias obsoleto de :class:`collections.abc.Awaitable`."

#: ../Doc/library/typing.rst:3508
msgid ""
":class:`collections.abc.Awaitable` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Awaitable` ahora soporta subíndices (``[]``). Véase :"
"pep:`585` y :ref:`types-genericalias`."

#: ../Doc/library/typing.rst:3515
msgid "Aliases to other ABCs in :mod:`collections.abc`"
msgstr "Alias a otros ABCs en :mod:`collections.abc`"

#: ../Doc/library/typing.rst:3519
msgid "Deprecated alias to :class:`collections.abc.Iterable`."
msgstr "Alias obsoleto de :class:`collections.abc.Iterable`."

#: ../Doc/library/typing.rst:3521
msgid ""
":class:`collections.abc.Iterable` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Iterable` ahora soporta subíndices (``[]``). Véase :"
"pep:`585` y :ref:`types-genericalias`."

#: ../Doc/library/typing.rst:3527
msgid "Deprecated alias to :class:`collections.abc.Iterator`."
msgstr "Alias obsoleto de :class:`collections.abc.Iterator`."

#: ../Doc/library/typing.rst:3529
msgid ""
":class:`collections.abc.Iterator` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Iterator` ahora soporta subíndices (``[]``). Véase :"
"pep:`585` y :ref:`types-genericalias`."

#: ../Doc/library/typing.rst:3535
msgid "Deprecated alias to :class:`collections.abc.Callable`."
msgstr "Alias obsoleto de :class:`collections.abc.Callable`."

#: ../Doc/library/typing.rst:3537
msgid ""
"See :ref:`annotating-callables` for details on how to use :class:"
"`collections.abc.Callable` and ``typing.Callable`` in type annotations."
msgstr ""
"Vea :ref:`annotating-callables` para información detallada de cómo usar :"
"class:`collections.abc.Callable` y ``typing.Callable`` en anotaciones de "
"tipo."

#: ../Doc/library/typing.rst:3540
msgid ""
":class:`collections.abc.Callable` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Callable` ahora soporta subíndices (``[]``). Véase :"
"pep:`585` y :ref:`types-genericalias`."

#: ../Doc/library/typing.rst:3550
msgid "Deprecated alias to :class:`collections.abc.Generator`."
msgstr "Alias obsoleto de :class:`collections.abc.Generator`."

#: ../Doc/library/typing.rst:3552
msgid ""
"A generator can be annotated by the generic type ``Generator[YieldType, "
"SendType, ReturnType]``. For example::"
msgstr ""
"Un generador puede ser anotado con el tipo genérico ``Generator[YieldType, "
"SendType, ReturnType]``. Por ejemplo::"

#: ../Doc/library/typing.rst:3561
msgid ""
"Note that unlike many other generics in the typing module, the ``SendType`` "
"of :class:`Generator` behaves contravariantly, not covariantly or "
"invariantly."
msgstr ""
"Nótese que en contraste con muchos otros genéricos en el módulo *typing*, el "
"``SendType`` de :class:`Generator` se comporta como contravariante, no "
"covariante ni invariante."

#: ../Doc/library/typing.rst:3565
msgid ""
"If your generator will only yield values, set the ``SendType`` and "
"``ReturnType`` to ``None``::"
msgstr ""
"Si tu generador solo retornará valores con *yield*, establece ``SendType`` y "
"``ReturnType`` como ``None``::"

#: ../Doc/library/typing.rst:3573
msgid ""
"Alternatively, annotate your generator as having a return type of either "
"``Iterable[YieldType]`` or ``Iterator[YieldType]``::"
msgstr ""
"Opcionalmente, anota tu generador con un tipo de retorno de "
"``Iterable[YieldType]`` o ``Iterator[YieldType]``::"

#: ../Doc/library/typing.rst:3581
msgid ""
":class:`collections.abc.Generator` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Generator` ahora soporta subíndices (``[]``). Véase :"
"pep:`585` y :ref:`types-genericalias`."

#: ../Doc/library/typing.rst:3587
msgid "Deprecated alias to :class:`collections.abc.Hashable`."
msgstr "Alias obsoleto de :class:`collections.abc.Hashable`."

#: ../Doc/library/typing.rst:3589
msgid "Use :class:`collections.abc.Hashable` directly instead."
msgstr "Use directamente :class:`collections.abc.Hashable` en su lugar."

#: ../Doc/library/typing.rst:3594
msgid "Deprecated alias to :class:`collections.abc.Reversible`."
msgstr "Alias obsoleto de :class:`collections.abc.Reversible`."

#: ../Doc/library/typing.rst:3596
msgid ""
":class:`collections.abc.Reversible` now supports subscripting (``[]``). See :"
"pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`collections.abc.Reversible` ahora soporta subíndices (``[]``). "
"Véase :pep:`585` y :ref:`types-genericalias`."

#: ../Doc/library/typing.rst:3602
msgid "Deprecated alias to :class:`collections.abc.Sized`."
msgstr "Alias obsoleto de :class:`collections.abc.Sized`."

#: ../Doc/library/typing.rst:3604
msgid "Use :class:`collections.abc.Sized` directly instead."
msgstr "Use directamente :class:`collections.abc.Sized` en su lugar."

#: ../Doc/library/typing.rst:3610
msgid "Aliases to :mod:`contextlib` ABCs"
msgstr "Alias de ABCs :mod:`contextlib`"

#: ../Doc/library/typing.rst:3614
msgid "Deprecated alias to :class:`contextlib.AbstractContextManager`."
msgstr "Alias obsoleto de :class:`contextlib.AbstractContextManager`."

#: ../Doc/library/typing.rst:3619
msgid ""
":class:`contextlib.AbstractContextManager` now supports subscripting "
"(``[]``). See :pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`contextlib.AbstractContextManager` ahora soporta subíndices "
"(``[]``). Véase :pep:`585` y :ref:`types-genericalias`."

#: ../Doc/library/typing.rst:3626
msgid "Deprecated alias to :class:`contextlib.AbstractAsyncContextManager`."
msgstr "Alias obsoleto de :class:`contextlib.AbstractAsyncContextManager`."

#: ../Doc/library/typing.rst:3631
msgid ""
":class:`contextlib.AbstractAsyncContextManager` now supports subscripting "
"(``[]``). See :pep:`585` and :ref:`types-genericalias`."
msgstr ""
":class:`contextlib.AbstractAsyncContextManager` ahora soporta subíndices "
"(``[]``). Véase :pep:`585` y :ref:`types-genericalias`."

#: ../Doc/library/typing.rst:3637
msgid "Deprecation Timeline of Major Features"
msgstr "Línea de tiempo de obsolescencia de características principales"

#: ../Doc/library/typing.rst:3639
msgid ""
"Certain features in ``typing`` are deprecated and may be removed in a future "
"version of Python. The following table summarizes major deprecations for "
"your convenience. This is subject to change, and not all deprecations are "
"listed."
msgstr ""
"Algunas características de ``typing`` están obsoletas y podrán ser removidas "
"en versiones futuras de Python. Lo que sigue es una tabla que resume las "
"principales obsolescencias para su conveniencia. Ésto está sujeto a cambio y "
"no todas las obsolescencias están representadas."

#: ../Doc/library/typing.rst:3646
msgid "Feature"
msgstr "Característica"

#: ../Doc/library/typing.rst:3647
msgid "Deprecated in"
msgstr "En desuso desde"

#: ../Doc/library/typing.rst:3648
msgid "Projected removal"
msgstr "Eliminación proyectada"

#: ../Doc/library/typing.rst:3649
msgid "PEP/issue"
msgstr "PEP/issue"

#: ../Doc/library/typing.rst:3650
msgid "``typing.io`` and ``typing.re`` submodules"
msgstr "sub-módulos ``typing.io`` y ``typing.re``"

#: ../Doc/library/typing.rst:3651
msgid "3.8"
msgstr "3.8"

#: ../Doc/library/typing.rst:3652
msgid "3.13"
msgstr "3.13"

#: ../Doc/library/typing.rst:3653
msgid ":issue:`38291`"
msgstr ":issue:`38291`"

#: ../Doc/library/typing.rst:3654
msgid "``typing`` versions of standard collections"
msgstr "Versiones ``typing`` de colecciones estándares"

#: ../Doc/library/typing.rst:3655 ../Doc/library/typing.rst:3659
msgid "3.9"
msgstr "3.9"

#: ../Doc/library/typing.rst:3656
msgid "Undecided (see :ref:`deprecated-aliases` for more information)"
msgstr "No decidido (ver :ref:`deprecated-aliases` para más información)"

#: ../Doc/library/typing.rst:3657
msgid ":pep:`585`"
msgstr ":pep:`585`"

#: ../Doc/library/typing.rst:3658
msgid ":class:`typing.ByteString`"
msgstr ":class:`typing.ByteString`"

#: ../Doc/library/typing.rst:3660
msgid "3.14"
msgstr "3.14"

#: ../Doc/library/typing.rst:3661
msgid ":gh:`91896`"
msgstr ":gh:`91896`"

#: ../Doc/library/typing.rst:3662
msgid ":data:`typing.Text`"
msgstr ":data:`typing.Text`"

#: ../Doc/library/typing.rst:3663
msgid "3.11"
msgstr "3.11"

#: ../Doc/library/typing.rst:3664 ../Doc/library/typing.rst:3668
#: ../Doc/library/typing.rst:3672
msgid "Undecided"
msgstr "No decidido"

#: ../Doc/library/typing.rst:3665
msgid ":gh:`92332`"
msgstr ":gh:`92332`"

#: ../Doc/library/typing.rst:3666
msgid ":class:`typing.Hashable` and :class:`typing.Sized`"
msgstr ":class:`typing.Hashable` y :class:`typing.Sized`"

#: ../Doc/library/typing.rst:3667 ../Doc/library/typing.rst:3671
msgid "3.12"
msgstr "3.12"

#: ../Doc/library/typing.rst:3669
msgid ":gh:`94309`"
msgstr ":gh:`94309`"

#: ../Doc/library/typing.rst:3670
msgid ":data:`typing.TypeAlias`"
msgstr ":data:`typing.TypeAlias`"

#: ../Doc/library/typing.rst:3673
msgid ":pep:`695`"
msgstr ":pep:`695`"
